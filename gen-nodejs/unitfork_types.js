//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var UnitFork = module.exports.UnitFork = function(args) {
  this.unitVersionId = null;
  this.accountId = null;
  this.projectId = null;
  this.secondsSpentIn = null;
  if (args) {
    if (args.unitVersionId !== undefined && args.unitVersionId !== null) {
      this.unitVersionId = args.unitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitVersionId is unset!');
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accountId is unset!');
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
    if (args.secondsSpentIn !== undefined && args.secondsSpentIn !== null) {
      this.secondsSpentIn = args.secondsSpentIn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field secondsSpentIn is unset!');
    }
  }
};
UnitFork.prototype = {};
UnitFork.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.secondsSpentIn = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnitFork.prototype.write = function(output) {
  output.writeStructBegin('UnitFork');
  if (this.unitVersionId !== null && this.unitVersionId !== undefined) {
    output.writeFieldBegin('unitVersionId', Thrift.Type.STRING, 1);
    output.writeString(this.unitVersionId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 3);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.secondsSpentIn !== null && this.secondsSpentIn !== undefined) {
    output.writeFieldBegin('secondsSpentIn', Thrift.Type.I32, 4);
    output.writeI32(this.secondsSpentIn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutogradeScriptStatusComplete = module.exports.AutogradeScriptStatusComplete = function(args) {
  this.returnCode = null;
  this.stdout = null;
  this.stderr = null;
  if (args) {
    if (args.returnCode !== undefined && args.returnCode !== null) {
      this.returnCode = args.returnCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnCode is unset!');
    }
    if (args.stdout !== undefined && args.stdout !== null) {
      this.stdout = args.stdout;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stdout is unset!');
    }
    if (args.stderr !== undefined && args.stderr !== null) {
      this.stderr = args.stderr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stderr is unset!');
    }
  }
};
AutogradeScriptStatusComplete.prototype = {};
AutogradeScriptStatusComplete.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.returnCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stdout = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stderr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutogradeScriptStatusComplete.prototype.write = function(output) {
  output.writeStructBegin('AutogradeScriptStatusComplete');
  if (this.returnCode !== null && this.returnCode !== undefined) {
    output.writeFieldBegin('returnCode', Thrift.Type.I32, 1);
    output.writeI32(this.returnCode);
    output.writeFieldEnd();
  }
  if (this.stdout !== null && this.stdout !== undefined) {
    output.writeFieldBegin('stdout', Thrift.Type.STRING, 2);
    output.writeString(this.stdout);
    output.writeFieldEnd();
  }
  if (this.stderr !== null && this.stderr !== undefined) {
    output.writeFieldBegin('stderr', Thrift.Type.STRING, 3);
    output.writeString(this.stderr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutogradeScriptStatus = module.exports.AutogradeScriptStatus = function(args) {
  this.complete = null;
  this.error = null;
  if (args) {
    if (args.complete !== undefined && args.complete !== null) {
      this.complete = new ttypes.AutogradeScriptStatusComplete(args.complete);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new common_ttypes.Empty(args.error);
    }
  }
};
AutogradeScriptStatus.prototype = {};
AutogradeScriptStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.complete = new ttypes.AutogradeScriptStatusComplete();
        this.complete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new common_ttypes.Empty();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutogradeScriptStatus.prototype.write = function(output) {
  output.writeStructBegin('AutogradeScriptStatus');
  if (this.complete !== null && this.complete !== undefined) {
    output.writeFieldBegin('complete', Thrift.Type.STRUCT, 1);
    this.complete.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutogradeScriptResult = module.exports.AutogradeScriptResult = function(args) {
  this.status = null;
  this.points = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.AutogradeScriptStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    }
  }
};
AutogradeScriptResult.prototype = {};
AutogradeScriptResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.AutogradeScriptStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutogradeScriptResult.prototype.write = function(output) {
  output.writeStructBegin('AutogradeScriptResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 2);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

