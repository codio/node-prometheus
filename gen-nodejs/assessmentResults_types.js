//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var assessments_ttypes = require('./assessments_types');


var ttypes = module.exports = {};
var MathAttempt = module.exports.MathAttempt = function(args) {
  this.points = null;
  this.answers = null;
  this.questionText = null;
  this.answerNotes = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
    if (args.answers !== undefined && args.answers !== null) {
      this.answers = Thrift.copyMap(args.answers, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answers is unset!');
    }
    if (args.questionText !== undefined && args.questionText !== null) {
      this.questionText = args.questionText;
    }
    if (args.answerNotes !== undefined && args.answerNotes !== null) {
      this.answerNotes = args.answerNotes;
    }
  }
};
MathAttempt.prototype = {};
MathAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.answers = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.answers[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.questionText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.answerNotes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MathAttempt.prototype.write = function(output) {
  output.writeStructBegin('MathAttempt');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  if (this.answers !== null && this.answers !== undefined) {
    output.writeFieldBegin('answers', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.answers));
    for (var kiter8 in this.answers)
    {
      if (this.answers.hasOwnProperty(kiter8))
      {
        var viter9 = this.answers[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.questionText !== null && this.questionText !== undefined) {
    output.writeFieldBegin('questionText', Thrift.Type.STRING, 3);
    output.writeString(this.questionText);
    output.writeFieldEnd();
  }
  if (this.answerNotes !== null && this.answerNotes !== undefined) {
    output.writeFieldBegin('answerNotes', Thrift.Type.STRING, 4);
    output.writeString(this.answerNotes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MultipleChoiceAttempt = module.exports.MultipleChoiceAttempt = function(args) {
  this.points = null;
  this.expectedAnswerIds = null;
  this.answerIds = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
    if (args.expectedAnswerIds !== undefined && args.expectedAnswerIds !== null) {
      this.expectedAnswerIds = Thrift.copyList(args.expectedAnswerIds, [null]);
    }
    if (args.answerIds !== undefined && args.answerIds !== null) {
      this.answerIds = Thrift.copyList(args.answerIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answerIds is unset!');
    }
  }
};
MultipleChoiceAttempt.prototype = {};
MultipleChoiceAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size10 = 0;
        var _rtmp314;
        this.expectedAnswerIds = [];
        var _etype13 = 0;
        _rtmp314 = input.readSetBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString();
          this.expectedAnswerIds.push(elem16);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size17 = 0;
        var _rtmp321;
        this.answerIds = [];
        var _etype20 = 0;
        _rtmp321 = input.readSetBegin();
        _etype20 = _rtmp321.etype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var elem23 = null;
          elem23 = input.readString();
          this.answerIds.push(elem23);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultipleChoiceAttempt.prototype.write = function(output) {
  output.writeStructBegin('MultipleChoiceAttempt');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  if (this.expectedAnswerIds !== null && this.expectedAnswerIds !== undefined) {
    output.writeFieldBegin('expectedAnswerIds', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.expectedAnswerIds.length);
    for (var iter24 in this.expectedAnswerIds)
    {
      if (this.expectedAnswerIds.hasOwnProperty(iter24))
      {
        iter24 = this.expectedAnswerIds[iter24];
        output.writeString(iter24);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.answerIds !== null && this.answerIds !== undefined) {
    output.writeFieldBegin('answerIds', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.answerIds.length);
    for (var iter25 in this.answerIds)
    {
      if (this.answerIds.hasOwnProperty(iter25))
      {
        iter25 = this.answerIds[iter25];
        output.writeString(iter25);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FillInBlanksAttempt = module.exports.FillInBlanksAttempt = function(args) {
  this.points = null;
  this.expectedAnswers = null;
  this.answers = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
    if (args.expectedAnswers !== undefined && args.expectedAnswers !== null) {
      this.expectedAnswers = Thrift.copyList(args.expectedAnswers, [null]);
    }
    if (args.answers !== undefined && args.answers !== null) {
      this.answers = Thrift.copyList(args.answers, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answers is unset!');
    }
  }
};
FillInBlanksAttempt.prototype = {};
FillInBlanksAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.expectedAnswers = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.expectedAnswers.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.answers = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = input.readString();
          this.answers.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FillInBlanksAttempt.prototype.write = function(output) {
  output.writeStructBegin('FillInBlanksAttempt');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  if (this.expectedAnswers !== null && this.expectedAnswers !== undefined) {
    output.writeFieldBegin('expectedAnswers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.expectedAnswers.length);
    for (var iter40 in this.expectedAnswers)
    {
      if (this.expectedAnswers.hasOwnProperty(iter40))
      {
        iter40 = this.expectedAnswers[iter40];
        output.writeString(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.answers !== null && this.answers !== undefined) {
    output.writeFieldBegin('answers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.answers.length);
    for (var iter41 in this.answers)
    {
      if (this.answers.hasOwnProperty(iter41))
      {
        iter41 = this.answers[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeTestAttempt = module.exports.CodeTestAttempt = function(args) {
  this.points = null;
  this.returnCode = null;
  this.stdout = null;
  this.stderr = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
    if (args.returnCode !== undefined && args.returnCode !== null) {
      this.returnCode = args.returnCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnCode is unset!');
    }
    if (args.stdout !== undefined && args.stdout !== null) {
      this.stdout = args.stdout;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stdout is unset!');
    }
    if (args.stderr !== undefined && args.stderr !== null) {
      this.stderr = args.stderr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stderr is unset!');
    }
  }
};
CodeTestAttempt.prototype = {};
CodeTestAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.returnCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stdout = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stderr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeTestAttempt.prototype.write = function(output) {
  output.writeStructBegin('CodeTestAttempt');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  if (this.returnCode !== null && this.returnCode !== undefined) {
    output.writeFieldBegin('returnCode', Thrift.Type.I32, 2);
    output.writeI32(this.returnCode);
    output.writeFieldEnd();
  }
  if (this.stdout !== null && this.stdout !== undefined) {
    output.writeFieldBegin('stdout', Thrift.Type.STRING, 3);
    output.writeString(this.stdout);
    output.writeFieldEnd();
  }
  if (this.stderr !== null && this.stderr !== undefined) {
    output.writeFieldBegin('stderr', Thrift.Type.STRING, 4);
    output.writeString(this.stderr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeOutputCompareAttempt = module.exports.CodeOutputCompareAttempt = function(args) {
  this.points = null;
  this.returnCode = null;
  this.stdout = null;
  this.stderr = null;
  this.expectedOutputs = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
    if (args.returnCode !== undefined && args.returnCode !== null) {
      this.returnCode = args.returnCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnCode is unset!');
    }
    if (args.stdout !== undefined && args.stdout !== null) {
      this.stdout = args.stdout;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stdout is unset!');
    }
    if (args.stderr !== undefined && args.stderr !== null) {
      this.stderr = args.stderr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stderr is unset!');
    }
    if (args.expectedOutputs !== undefined && args.expectedOutputs !== null) {
      this.expectedOutputs = Thrift.copyList(args.expectedOutputs, [assessments_ttypes.ExpectedCodeOutputCompareResult]);
    }
  }
};
CodeOutputCompareAttempt.prototype = {};
CodeOutputCompareAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.returnCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stdout = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stderr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.expectedOutputs = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new assessments_ttypes.ExpectedCodeOutputCompareResult();
          elem48.read(input);
          this.expectedOutputs.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeOutputCompareAttempt.prototype.write = function(output) {
  output.writeStructBegin('CodeOutputCompareAttempt');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  if (this.returnCode !== null && this.returnCode !== undefined) {
    output.writeFieldBegin('returnCode', Thrift.Type.I32, 2);
    output.writeI32(this.returnCode);
    output.writeFieldEnd();
  }
  if (this.stdout !== null && this.stdout !== undefined) {
    output.writeFieldBegin('stdout', Thrift.Type.STRING, 3);
    output.writeString(this.stdout);
    output.writeFieldEnd();
  }
  if (this.stderr !== null && this.stderr !== undefined) {
    output.writeFieldBegin('stderr', Thrift.Type.STRING, 4);
    output.writeString(this.stderr);
    output.writeFieldEnd();
  }
  if (this.expectedOutputs !== null && this.expectedOutputs !== undefined) {
    output.writeFieldBegin('expectedOutputs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.expectedOutputs.length);
    for (var iter49 in this.expectedOutputs)
    {
      if (this.expectedOutputs.hasOwnProperty(iter49))
      {
        iter49 = this.expectedOutputs[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FreeTextDone = module.exports.FreeTextDone = function(args) {
  this.points = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
  }
};
FreeTextDone.prototype = {};
FreeTextDone.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FreeTextDone.prototype.write = function(output) {
  output.writeStructBegin('FreeTextDone');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FreeTextStatus = module.exports.FreeTextStatus = function(args) {
  this.pending = null;
  this.done = null;
  if (args) {
    if (args.pending !== undefined && args.pending !== null) {
      this.pending = new common_ttypes.Empty(args.pending);
    }
    if (args.done !== undefined && args.done !== null) {
      this.done = new ttypes.FreeTextDone(args.done);
    }
  }
};
FreeTextStatus.prototype = {};
FreeTextStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending = new common_ttypes.Empty();
        this.pending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.done = new ttypes.FreeTextDone();
        this.done.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FreeTextStatus.prototype.write = function(output) {
  output.writeStructBegin('FreeTextStatus');
  if (this.pending !== null && this.pending !== undefined) {
    output.writeFieldBegin('pending', Thrift.Type.STRUCT, 1);
    this.pending.write(output);
    output.writeFieldEnd();
  }
  if (this.done !== null && this.done !== undefined) {
    output.writeFieldBegin('done', Thrift.Type.STRUCT, 2);
    this.done.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FreeTextAttempt = module.exports.FreeTextAttempt = function(args) {
  this.id = null;
  this.answer = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.answer !== undefined && args.answer !== null) {
      this.answer = args.answer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answer is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.FreeTextStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
FreeTextAttempt.prototype = {};
FreeTextAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.answer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.FreeTextStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FreeTextAttempt.prototype.write = function(output) {
  output.writeStructBegin('FreeTextAttempt');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.answer !== null && this.answer !== undefined) {
    output.writeFieldBegin('answer', Thrift.Type.STRING, 2);
    output.writeString(this.answer);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 3);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomTaskAttempt = module.exports.CustomTaskAttempt = function(args) {
  this.points = null;
  if (args) {
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
  }
};
CustomTaskAttempt.prototype = {};
CustomTaskAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomTaskAttempt.prototype.write = function(output) {
  output.writeStructBegin('CustomTaskAttempt');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 1);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskAttemptHistory = module.exports.TaskAttemptHistory = function(args) {
  this.multipleChoice = null;
  this.fillInBlanks = null;
  this.codeTest = null;
  this.codeOutputCompare = null;
  this.custom = null;
  this.freeText = null;
  this.math = null;
  if (args) {
    if (args.multipleChoice !== undefined && args.multipleChoice !== null) {
      this.multipleChoice = Thrift.copyList(args.multipleChoice, [ttypes.MultipleChoiceAttempt]);
    }
    if (args.fillInBlanks !== undefined && args.fillInBlanks !== null) {
      this.fillInBlanks = Thrift.copyList(args.fillInBlanks, [ttypes.FillInBlanksAttempt]);
    }
    if (args.codeTest !== undefined && args.codeTest !== null) {
      this.codeTest = Thrift.copyList(args.codeTest, [ttypes.CodeTestAttempt]);
    }
    if (args.codeOutputCompare !== undefined && args.codeOutputCompare !== null) {
      this.codeOutputCompare = Thrift.copyList(args.codeOutputCompare, [ttypes.CodeOutputCompareAttempt]);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = Thrift.copyList(args.custom, [ttypes.CustomTaskAttempt]);
    }
    if (args.freeText !== undefined && args.freeText !== null) {
      this.freeText = Thrift.copyList(args.freeText, [ttypes.FreeTextAttempt]);
    }
    if (args.math !== undefined && args.math !== null) {
      this.math = Thrift.copyList(args.math, [ttypes.MathAttempt]);
    }
  }
};
TaskAttemptHistory.prototype = {};
TaskAttemptHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.multipleChoice = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new ttypes.MultipleChoiceAttempt();
          elem56.read(input);
          this.multipleChoice.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size57 = 0;
        var _rtmp361;
        this.fillInBlanks = [];
        var _etype60 = 0;
        _rtmp361 = input.readListBegin();
        _etype60 = _rtmp361.etype;
        _size57 = _rtmp361.size;
        for (var _i62 = 0; _i62 < _size57; ++_i62)
        {
          var elem63 = null;
          elem63 = new ttypes.FillInBlanksAttempt();
          elem63.read(input);
          this.fillInBlanks.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.codeTest = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.CodeTestAttempt();
          elem70.read(input);
          this.codeTest.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.codeOutputCompare = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = new ttypes.CodeOutputCompareAttempt();
          elem77.read(input);
          this.codeOutputCompare.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.custom = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new ttypes.CustomTaskAttempt();
          elem84.read(input);
          this.custom.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size85 = 0;
        var _rtmp389;
        this.freeText = [];
        var _etype88 = 0;
        _rtmp389 = input.readListBegin();
        _etype88 = _rtmp389.etype;
        _size85 = _rtmp389.size;
        for (var _i90 = 0; _i90 < _size85; ++_i90)
        {
          var elem91 = null;
          elem91 = new ttypes.FreeTextAttempt();
          elem91.read(input);
          this.freeText.push(elem91);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.math = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new ttypes.MathAttempt();
          elem98.read(input);
          this.math.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskAttemptHistory.prototype.write = function(output) {
  output.writeStructBegin('TaskAttemptHistory');
  if (this.multipleChoice !== null && this.multipleChoice !== undefined) {
    output.writeFieldBegin('multipleChoice', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.multipleChoice.length);
    for (var iter99 in this.multipleChoice)
    {
      if (this.multipleChoice.hasOwnProperty(iter99))
      {
        iter99 = this.multipleChoice[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fillInBlanks !== null && this.fillInBlanks !== undefined) {
    output.writeFieldBegin('fillInBlanks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fillInBlanks.length);
    for (var iter100 in this.fillInBlanks)
    {
      if (this.fillInBlanks.hasOwnProperty(iter100))
      {
        iter100 = this.fillInBlanks[iter100];
        iter100.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.codeTest !== null && this.codeTest !== undefined) {
    output.writeFieldBegin('codeTest', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.codeTest.length);
    for (var iter101 in this.codeTest)
    {
      if (this.codeTest.hasOwnProperty(iter101))
      {
        iter101 = this.codeTest[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.codeOutputCompare !== null && this.codeOutputCompare !== undefined) {
    output.writeFieldBegin('codeOutputCompare', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.codeOutputCompare.length);
    for (var iter102 in this.codeOutputCompare)
    {
      if (this.codeOutputCompare.hasOwnProperty(iter102))
      {
        iter102 = this.codeOutputCompare[iter102];
        iter102.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.custom.length);
    for (var iter103 in this.custom)
    {
      if (this.custom.hasOwnProperty(iter103))
      {
        iter103 = this.custom[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.freeText !== null && this.freeText !== undefined) {
    output.writeFieldBegin('freeText', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.freeText.length);
    for (var iter104 in this.freeText)
    {
      if (this.freeText.hasOwnProperty(iter104))
      {
        iter104 = this.freeText[iter104];
        iter104.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.math !== null && this.math !== undefined) {
    output.writeFieldBegin('math', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.math.length);
    for (var iter105 in this.math)
    {
      if (this.math.hasOwnProperty(iter105))
      {
        iter105 = this.math[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskAttempt = module.exports.TaskAttempt = function(args) {
  this.multipleChoice = null;
  this.fillInBlanks = null;
  this.codeTest = null;
  this.codeOutputCompare = null;
  this.custom = null;
  this.freeText = null;
  this.math = null;
  if (args) {
    if (args.multipleChoice !== undefined && args.multipleChoice !== null) {
      this.multipleChoice = new ttypes.MultipleChoiceAttempt(args.multipleChoice);
    }
    if (args.fillInBlanks !== undefined && args.fillInBlanks !== null) {
      this.fillInBlanks = new ttypes.FillInBlanksAttempt(args.fillInBlanks);
    }
    if (args.codeTest !== undefined && args.codeTest !== null) {
      this.codeTest = new ttypes.CodeTestAttempt(args.codeTest);
    }
    if (args.codeOutputCompare !== undefined && args.codeOutputCompare !== null) {
      this.codeOutputCompare = new ttypes.CodeOutputCompareAttempt(args.codeOutputCompare);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = new ttypes.CustomTaskAttempt(args.custom);
    }
    if (args.freeText !== undefined && args.freeText !== null) {
      this.freeText = new ttypes.FreeTextAttempt(args.freeText);
    }
    if (args.math !== undefined && args.math !== null) {
      this.math = new ttypes.MathAttempt(args.math);
    }
  }
};
TaskAttempt.prototype = {};
TaskAttempt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.multipleChoice = new ttypes.MultipleChoiceAttempt();
        this.multipleChoice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fillInBlanks = new ttypes.FillInBlanksAttempt();
        this.fillInBlanks.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.codeTest = new ttypes.CodeTestAttempt();
        this.codeTest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.codeOutputCompare = new ttypes.CodeOutputCompareAttempt();
        this.codeOutputCompare.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new ttypes.CustomTaskAttempt();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.freeText = new ttypes.FreeTextAttempt();
        this.freeText.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.math = new ttypes.MathAttempt();
        this.math.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskAttempt.prototype.write = function(output) {
  output.writeStructBegin('TaskAttempt');
  if (this.multipleChoice !== null && this.multipleChoice !== undefined) {
    output.writeFieldBegin('multipleChoice', Thrift.Type.STRUCT, 1);
    this.multipleChoice.write(output);
    output.writeFieldEnd();
  }
  if (this.fillInBlanks !== null && this.fillInBlanks !== undefined) {
    output.writeFieldBegin('fillInBlanks', Thrift.Type.STRUCT, 2);
    this.fillInBlanks.write(output);
    output.writeFieldEnd();
  }
  if (this.codeTest !== null && this.codeTest !== undefined) {
    output.writeFieldBegin('codeTest', Thrift.Type.STRUCT, 3);
    this.codeTest.write(output);
    output.writeFieldEnd();
  }
  if (this.codeOutputCompare !== null && this.codeOutputCompare !== undefined) {
    output.writeFieldBegin('codeOutputCompare', Thrift.Type.STRUCT, 4);
    this.codeOutputCompare.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 5);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  if (this.freeText !== null && this.freeText !== undefined) {
    output.writeFieldBegin('freeText', Thrift.Type.STRUCT, 6);
    this.freeText.write(output);
    output.writeFieldEnd();
  }
  if (this.math !== null && this.math !== undefined) {
    output.writeFieldBegin('math', Thrift.Type.STRUCT, 7);
    this.math.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckResult = module.exports.CheckResult = function(args) {
  this.attempt = null;
  this.guidance = null;
  if (args) {
    if (args.attempt !== undefined && args.attempt !== null) {
      this.attempt = new ttypes.TaskAttempt(args.attempt);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attempt is unset!');
    }
    if (args.guidance !== undefined && args.guidance !== null) {
      this.guidance = args.guidance;
    }
  }
};
CheckResult.prototype = {};
CheckResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.attempt = new ttypes.TaskAttempt();
        this.attempt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guidance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckResult.prototype.write = function(output) {
  output.writeStructBegin('CheckResult');
  if (this.attempt !== null && this.attempt !== undefined) {
    output.writeFieldBegin('attempt', Thrift.Type.STRUCT, 1);
    this.attempt.write(output);
    output.writeFieldEnd();
  }
  if (this.guidance !== null && this.guidance !== undefined) {
    output.writeFieldBegin('guidance', Thrift.Type.STRING, 2);
    output.writeString(this.guidance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AssessmentResult = module.exports.AssessmentResult = function(args) {
  this.attempts = null;
  this.guidance = null;
  if (args) {
    if (args.attempts !== undefined && args.attempts !== null) {
      this.attempts = new ttypes.TaskAttemptHistory(args.attempts);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attempts is unset!');
    }
    if (args.guidance !== undefined && args.guidance !== null) {
      this.guidance = args.guidance;
    }
  }
};
AssessmentResult.prototype = {};
AssessmentResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.attempts = new ttypes.TaskAttemptHistory();
        this.attempts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guidance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssessmentResult.prototype.write = function(output) {
  output.writeStructBegin('AssessmentResult');
  if (this.attempts !== null && this.attempts !== undefined) {
    output.writeFieldBegin('attempts', Thrift.Type.STRUCT, 1);
    this.attempts.write(output);
    output.writeFieldEnd();
  }
  if (this.guidance !== null && this.guidance !== undefined) {
    output.writeFieldBegin('guidance', Thrift.Type.STRING, 2);
    output.writeString(this.guidance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

