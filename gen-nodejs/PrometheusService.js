//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var guides_ttypes = require('./guides_types')
var unit_ttypes = require('./unit_types')
var module_ttypes = require('./module_types')
var course_ttypes = require('./course_types')
var unitfork_ttypes = require('./unitfork_types')


var ttypes = require('./prometheus_types');
//HELPER FUNCTIONS AND STRUCTURES

PrometheusService_getCoursesByModuleIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
  }
};
PrometheusService_getCoursesByModuleIds_args.prototype = {};
PrometheusService_getCoursesByModuleIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.ids = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString();
          this.ids.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCoursesByModuleIds_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCoursesByModuleIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter41 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter41))
      {
        iter41 = this.ids[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getCoursesByModuleIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_getCoursesByModuleIds_result.prototype = {};
PrometheusService_getCoursesByModuleIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.success = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new course_ttypes.Course();
          elem48.read(input);
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCoursesByModuleIds_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCoursesByModuleIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter49 in this.success)
    {
      if (this.success.hasOwnProperty(iter49))
      {
        iter49 = this.success[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getCourses_args = function(args) {
  this.ids = null;
  this.withModules = false;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.withModules !== undefined) {
      this.withModules = args.withModules;
    }
  }
};
PrometheusService_getCourses_args.prototype = {};
PrometheusService_getCourses_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.ids = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readString();
          this.ids.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withModules = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCourses_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCourses_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter57 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter57))
      {
        iter57 = this.ids[iter57];
        output.writeString(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withModules !== null && this.withModules !== undefined) {
    output.writeFieldBegin('withModules', Thrift.Type.BOOL, 2);
    output.writeBool(this.withModules);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getCourses_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_getCourses_result.prototype = {};
PrometheusService_getCourses_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetCourseResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCourses_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCourses_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_createCourse_args = function(args) {
  this.details = null;
  if (args) {
    if (args.details !== undefined) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_createCourse_args.prototype = {};
PrometheusService_createCourse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new course_ttypes.CourseDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createCourse_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createCourse_args');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 1);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_createCourse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_createCourse_result.prototype = {};
PrometheusService_createCourse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new course_ttypes.Course();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createCourse_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createCourse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_updateCourse_args = function(args) {
  this.id = null;
  this.details = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_updateCourse_args.prototype = {};
PrometheusService_updateCourse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.UpdateCourseDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateCourse_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateCourse_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_updateCourse_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateCourse_result.prototype = {};
PrometheusService_updateCourse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new course_ttypes.Course();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateCourse_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateCourse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_setCourseModules_args = function(args) {
  this.id = null;
  this.moduleIds = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.moduleIds !== undefined) {
      this.moduleIds = args.moduleIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleIds is unset!');
    }
  }
};
PrometheusService_setCourseModules_args.prototype = {};
PrometheusService_setCourseModules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.moduleIds = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString();
          this.moduleIds.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_setCourseModules_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_setCourseModules_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.moduleIds !== null && this.moduleIds !== undefined) {
    output.writeFieldBegin('moduleIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.moduleIds.length);
    for (var iter65 in this.moduleIds)
    {
      if (this.moduleIds.hasOwnProperty(iter65))
      {
        iter65 = this.moduleIds[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_setCourseModules_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_setCourseModules_result.prototype = {};
PrometheusService_setCourseModules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_setCourseModules_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_setCourseModules_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_deleteCourse_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_deleteCourse_args.prototype = {};
PrometheusService_deleteCourse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteCourse_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteCourse_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_deleteCourse_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_deleteCourse_result.prototype = {};
PrometheusService_deleteCourse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteCourse_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteCourse_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getModules_args = function(args) {
  this.ids = null;
  this.withUnits = false;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.withUnits !== undefined) {
      this.withUnits = args.withUnits;
    }
  }
};
PrometheusService_getModules_args.prototype = {};
PrometheusService_getModules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.ids = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = input.readString();
          this.ids.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withUnits = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModules_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModules_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter73 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter73))
      {
        iter73 = this.ids[iter73];
        output.writeString(iter73);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withUnits !== null && this.withUnits !== undefined) {
    output.writeFieldBegin('withUnits', Thrift.Type.BOOL, 2);
    output.writeBool(this.withUnits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getModules_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_getModules_result.prototype = {};
PrometheusService_getModules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.success = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new module_ttypes.Module();
          elem80.read(input);
          this.success.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModules_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModules_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter81 in this.success)
    {
      if (this.success.hasOwnProperty(iter81))
      {
        iter81 = this.success[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getModuleByUnitId_args = function(args) {
  this.unitId = null;
  if (args) {
    if (args.unitId !== undefined) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
  }
};
PrometheusService_getModuleByUnitId_args.prototype = {};
PrometheusService_getModuleByUnitId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModuleByUnitId_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModuleByUnitId_args');
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 1);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getModuleByUnitId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_getModuleByUnitId_result.prototype = {};
PrometheusService_getModuleByUnitId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new module_ttypes.Module();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModuleByUnitId_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModuleByUnitId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_createModule_args = function(args) {
  this.details = null;
  if (args) {
    if (args.details !== undefined) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_createModule_args.prototype = {};
PrometheusService_createModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new module_ttypes.ModuleDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createModule_args');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 1);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_createModule_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_createModule_result.prototype = {};
PrometheusService_createModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new module_ttypes.Module();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_updateModule_args = function(args) {
  this.id = null;
  this.details = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_updateModule_args.prototype = {};
PrometheusService_updateModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.UpdateModuleDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateModule_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_updateModule_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateModule_result.prototype = {};
PrometheusService_updateModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new module_ttypes.Module();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_deleteModule_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_deleteModule_args.prototype = {};
PrometheusService_deleteModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteModule_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_deleteModule_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_deleteModule_result.prototype = {};
PrometheusService_deleteModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteModule_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_addUnitToModule_args = function(args) {
  this.moduleId = null;
  this.unitDetails = null;
  if (args) {
    if (args.moduleId !== undefined) {
      this.moduleId = args.moduleId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleId is unset!');
    }
    if (args.unitDetails !== undefined) {
      this.unitDetails = args.unitDetails;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitDetails is unset!');
    }
  }
};
PrometheusService_addUnitToModule_args.prototype = {};
PrometheusService_addUnitToModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unitDetails = new unit_ttypes.Details();
        this.unitDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_addUnitToModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_addUnitToModule_args');
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 1);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.unitDetails !== null && this.unitDetails !== undefined) {
    output.writeFieldBegin('unitDetails', Thrift.Type.STRUCT, 2);
    this.unitDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_addUnitToModule_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_addUnitToModule_result.prototype = {};
PrometheusService_addUnitToModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unit_ttypes.ModuleUnit();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_addUnitToModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_addUnitToModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_updateUnit_args = function(args) {
  this.id = null;
  this.details = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_updateUnit_args.prototype = {};
PrometheusService_updateUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.UpdateUnitDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateUnit_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_updateUnit_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateUnit_result.prototype = {};
PrometheusService_updateUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateUnit_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_publishUnit_args = function(args) {
  this.taskId = null;
  this.unitId = null;
  this.projectId = null;
  this.stackVersionId = null;
  if (args) {
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taskId is unset!');
    }
    if (args.unitId !== undefined) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
    if (args.projectId !== undefined) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
    if (args.stackVersionId !== undefined) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
PrometheusService_publishUnit_args.prototype = {};
PrometheusService_publishUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_publishUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_publishUnit_args');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 2);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 3);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 4);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_publishUnit_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_publishUnit_result.prototype = {};
PrometheusService_publishUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_publishUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_publishUnit_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_changeStackVersionInUnit_args = function(args) {
  this.unitId = null;
  this.stackVersionId = null;
  if (args) {
    if (args.unitId !== undefined) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
    if (args.stackVersionId !== undefined) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
PrometheusService_changeStackVersionInUnit_args.prototype = {};
PrometheusService_changeStackVersionInUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_changeStackVersionInUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_changeStackVersionInUnit_args');
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 1);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 2);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_changeStackVersionInUnit_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_changeStackVersionInUnit_result.prototype = {};
PrometheusService_changeStackVersionInUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChangeStackVersionInUnitResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_changeStackVersionInUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_changeStackVersionInUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_removeUnit_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_removeUnit_args.prototype = {};
PrometheusService_removeUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_removeUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_removeUnit_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_removeUnit_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_removeUnit_result.prototype = {};
PrometheusService_removeUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_removeUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_removeUnit_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnit_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_getUnit_args.prototype = {};
PrometheusService_getUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnit_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnit_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_getUnit_result.prototype = {};
PrometheusService_getUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unit_ttypes.ModuleUnit();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_reorderUnits_args = function(args) {
  this.moduleId = null;
  this.unitIds = null;
  if (args) {
    if (args.moduleId !== undefined) {
      this.moduleId = args.moduleId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleId is unset!');
    }
    if (args.unitIds !== undefined) {
      this.unitIds = args.unitIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitIds is unset!');
    }
  }
};
PrometheusService_reorderUnits_args.prototype = {};
PrometheusService_reorderUnits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.unitIds = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readString();
          this.unitIds.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_reorderUnits_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_reorderUnits_args');
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 1);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.unitIds !== null && this.unitIds !== undefined) {
    output.writeFieldBegin('unitIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.unitIds.length);
    for (var iter89 in this.unitIds)
    {
      if (this.unitIds.hasOwnProperty(iter89))
      {
        iter89 = this.unitIds[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_reorderUnits_result = function(args) {
  this.nfe = null;
  this.rce = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ReorderConflictException) {
    this.rce = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
    if (args.rce !== undefined) {
      this.rce = args.rce;
    }
  }
};
PrometheusService_reorderUnits_result.prototype = {};
PrometheusService_reorderUnits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rce = new ttypes.ReorderConflictException();
        this.rce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_reorderUnits_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_reorderUnits_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.rce !== null && this.rce !== undefined) {
    output.writeFieldBegin('rce', Thrift.Type.STRUCT, 2);
    this.rce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_createUnitFork_args = function(args) {
  this.taskId = null;
  this.unitVersionId = null;
  this.courseId = null;
  this.accountId = null;
  this.gigaBoxSlot = null;
  if (args) {
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taskId is unset!');
    }
    if (args.unitVersionId !== undefined) {
      this.unitVersionId = args.unitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitVersionId is unset!');
    }
    if (args.courseId !== undefined) {
      this.courseId = args.courseId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field courseId is unset!');
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accountId is unset!');
    }
    if (args.gigaBoxSlot !== undefined) {
      this.gigaBoxSlot = args.gigaBoxSlot;
    }
  }
};
PrometheusService_createUnitFork_args.prototype = {};
PrometheusService_createUnitFork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.unitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.courseId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gigaBoxSlot = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createUnitFork_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createUnitFork_args');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  if (this.unitVersionId !== null && this.unitVersionId !== undefined) {
    output.writeFieldBegin('unitVersionId', Thrift.Type.STRING, 2);
    output.writeString(this.unitVersionId);
    output.writeFieldEnd();
  }
  if (this.courseId !== null && this.courseId !== undefined) {
    output.writeFieldBegin('courseId', Thrift.Type.STRING, 3);
    output.writeString(this.courseId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 4);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.gigaBoxSlot !== null && this.gigaBoxSlot !== undefined) {
    output.writeFieldBegin('gigaBoxSlot', Thrift.Type.STRING, 5);
    output.writeString(this.gigaBoxSlot);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_createUnitFork_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_createUnitFork_result.prototype = {};
PrometheusService_createUnitFork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createUnitFork_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createUnitFork_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnitGuides_args = function(args) {
  this.unitVersionId = null;
  this.isTeacher = false;
  if (args) {
    if (args.unitVersionId !== undefined) {
      this.unitVersionId = args.unitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitVersionId is unset!');
    }
    if (args.isTeacher !== undefined) {
      this.isTeacher = args.isTeacher;
    }
  }
};
PrometheusService_getUnitGuides_args.prototype = {};
PrometheusService_getUnitGuides_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isTeacher = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitGuides_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitGuides_args');
  if (this.unitVersionId !== null && this.unitVersionId !== undefined) {
    output.writeFieldBegin('unitVersionId', Thrift.Type.STRING, 1);
    output.writeString(this.unitVersionId);
    output.writeFieldEnd();
  }
  if (this.isTeacher !== null && this.isTeacher !== undefined) {
    output.writeFieldBegin('isTeacher', Thrift.Type.BOOL, 2);
    output.writeBool(this.isTeacher);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnitGuides_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.nge = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.NoGuidesInUnitException) {
    this.nge = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
    if (args.nge !== undefined) {
      this.nge = args.nge;
    }
  }
};
PrometheusService_getUnitGuides_result.prototype = {};
PrometheusService_getUnitGuides_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unit_ttypes.Guides();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nge = new ttypes.NoGuidesInUnitException();
        this.nge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitGuides_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitGuides_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.nge !== null && this.nge !== undefined) {
    output.writeFieldBegin('nge', Thrift.Type.STRUCT, 2);
    this.nge.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnitForkByProjectId_args = function(args) {
  this.projectId = null;
  if (args) {
    if (args.projectId !== undefined) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
  }
};
PrometheusService_getUnitForkByProjectId_args.prototype = {};
PrometheusService_getUnitForkByProjectId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForkByProjectId_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForkByProjectId_args');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 1);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnitForkByProjectId_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_getUnitForkByProjectId_result.prototype = {};
PrometheusService_getUnitForkByProjectId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unitfork_ttypes.UnitFork();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForkByProjectId_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForkByProjectId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnitForksByProjectIds_args = function(args) {
  this.projectIds = null;
  if (args) {
    if (args.projectIds !== undefined) {
      this.projectIds = args.projectIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectIds is unset!');
    }
  }
};
PrometheusService_getUnitForksByProjectIds_args.prototype = {};
PrometheusService_getUnitForksByProjectIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.projectIds = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = input.readString();
          this.projectIds.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForksByProjectIds_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForksByProjectIds_args');
  if (this.projectIds !== null && this.projectIds !== undefined) {
    output.writeFieldBegin('projectIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.projectIds.length);
    for (var iter97 in this.projectIds)
    {
      if (this.projectIds.hasOwnProperty(iter97))
      {
        iter97 = this.projectIds[iter97];
        output.writeString(iter97);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusService_getUnitForksByProjectIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PrometheusService_getUnitForksByProjectIds_result.prototype = {};
PrometheusService_getUnitForksByProjectIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.success = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new unitfork_ttypes.UnitFork();
          elem104.read(input);
          this.success.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForksByProjectIds_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForksByProjectIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter105 in this.success)
    {
      if (this.success.hasOwnProperty(iter105))
      {
        iter105 = this.success[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrometheusServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PrometheusServiceClient.prototype = {};
PrometheusServiceClient.prototype.seqid = function() { return this._seqid; }
PrometheusServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
PrometheusServiceClient.prototype.getCoursesByModuleIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoursesByModuleIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoursesByModuleIds(ids);
  }
};

PrometheusServiceClient.prototype.send_getCoursesByModuleIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCoursesByModuleIds', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getCoursesByModuleIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getCoursesByModuleIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getCoursesByModuleIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoursesByModuleIds failed: unknown result');
};
PrometheusServiceClient.prototype.getCourses = function(ids, withModules, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCourses(ids, withModules);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCourses(ids, withModules);
  }
};

PrometheusServiceClient.prototype.send_getCourses = function(ids, withModules) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCourses', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getCourses_args();
  args.ids = ids;
  args.withModules = withModules;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getCourses = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getCourses_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCourses failed: unknown result');
};
PrometheusServiceClient.prototype.createCourse = function(details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createCourse(details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createCourse(details);
  }
};

PrometheusServiceClient.prototype.send_createCourse = function(details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createCourse', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createCourse_args();
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createCourse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createCourse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createCourse failed: unknown result');
};
PrometheusServiceClient.prototype.updateCourse = function(id, details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateCourse(id, details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateCourse(id, details);
  }
};

PrometheusServiceClient.prototype.send_updateCourse = function(id, details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateCourse', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateCourse_args();
  args.id = id;
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateCourse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateCourse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateCourse failed: unknown result');
};
PrometheusServiceClient.prototype.setCourseModules = function(id, moduleIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setCourseModules(id, moduleIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setCourseModules(id, moduleIds);
  }
};

PrometheusServiceClient.prototype.send_setCourseModules = function(id, moduleIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setCourseModules', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_setCourseModules_args();
  args.id = id;
  args.moduleIds = moduleIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_setCourseModules = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_setCourseModules_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.deleteCourse = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteCourse(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteCourse(id);
  }
};

PrometheusServiceClient.prototype.send_deleteCourse = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteCourse', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_deleteCourse_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_deleteCourse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_deleteCourse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.getModules = function(ids, withUnits, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getModules(ids, withUnits);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getModules(ids, withUnits);
  }
};

PrometheusServiceClient.prototype.send_getModules = function(ids, withUnits) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getModules', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getModules_args();
  args.ids = ids;
  args.withUnits = withUnits;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getModules = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getModules_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getModules failed: unknown result');
};
PrometheusServiceClient.prototype.getModuleByUnitId = function(unitId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getModuleByUnitId(unitId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getModuleByUnitId(unitId);
  }
};

PrometheusServiceClient.prototype.send_getModuleByUnitId = function(unitId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getModuleByUnitId', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getModuleByUnitId_args();
  args.unitId = unitId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getModuleByUnitId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getModuleByUnitId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getModuleByUnitId failed: unknown result');
};
PrometheusServiceClient.prototype.createModule = function(details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createModule(details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createModule(details);
  }
};

PrometheusServiceClient.prototype.send_createModule = function(details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createModule_args();
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createModule failed: unknown result');
};
PrometheusServiceClient.prototype.updateModule = function(id, details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateModule(id, details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateModule(id, details);
  }
};

PrometheusServiceClient.prototype.send_updateModule = function(id, details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateModule_args();
  args.id = id;
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateModule failed: unknown result');
};
PrometheusServiceClient.prototype.deleteModule = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteModule(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteModule(id);
  }
};

PrometheusServiceClient.prototype.send_deleteModule = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_deleteModule_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_deleteModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_deleteModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.addUnitToModule = function(moduleId, unitDetails, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addUnitToModule(moduleId, unitDetails);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addUnitToModule(moduleId, unitDetails);
  }
};

PrometheusServiceClient.prototype.send_addUnitToModule = function(moduleId, unitDetails) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addUnitToModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_addUnitToModule_args();
  args.moduleId = moduleId;
  args.unitDetails = unitDetails;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_addUnitToModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_addUnitToModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addUnitToModule failed: unknown result');
};
PrometheusServiceClient.prototype.updateUnit = function(id, details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUnit(id, details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUnit(id, details);
  }
};

PrometheusServiceClient.prototype.send_updateUnit = function(id, details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateUnit_args();
  args.id = id;
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.publishUnit = function(taskId, unitId, projectId, stackVersionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_publishUnit(taskId, unitId, projectId, stackVersionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_publishUnit(taskId, unitId, projectId, stackVersionId);
  }
};

PrometheusServiceClient.prototype.send_publishUnit = function(taskId, unitId, projectId, stackVersionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('publishUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_publishUnit_args();
  args.taskId = taskId;
  args.unitId = unitId;
  args.projectId = projectId;
  args.stackVersionId = stackVersionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_publishUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_publishUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.changeStackVersionInUnit = function(unitId, stackVersionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeStackVersionInUnit(unitId, stackVersionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeStackVersionInUnit(unitId, stackVersionId);
  }
};

PrometheusServiceClient.prototype.send_changeStackVersionInUnit = function(unitId, stackVersionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeStackVersionInUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_changeStackVersionInUnit_args();
  args.unitId = unitId;
  args.stackVersionId = stackVersionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_changeStackVersionInUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_changeStackVersionInUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('changeStackVersionInUnit failed: unknown result');
};
PrometheusServiceClient.prototype.removeUnit = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeUnit(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeUnit(id);
  }
};

PrometheusServiceClient.prototype.send_removeUnit = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_removeUnit_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_removeUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_removeUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.getUnit = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnit(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnit(id);
  }
};

PrometheusServiceClient.prototype.send_getUnit = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnit_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnit failed: unknown result');
};
PrometheusServiceClient.prototype.reorderUnits = function(moduleId, unitIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reorderUnits(moduleId, unitIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reorderUnits(moduleId, unitIds);
  }
};

PrometheusServiceClient.prototype.send_reorderUnits = function(moduleId, unitIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reorderUnits', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_reorderUnits_args();
  args.moduleId = moduleId;
  args.unitIds = unitIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_reorderUnits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_reorderUnits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.rce) {
    return callback(result.rce);
  }
  callback(null)
};
PrometheusServiceClient.prototype.createUnitFork = function(taskId, unitVersionId, courseId, accountId, gigaBoxSlot, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUnitFork(taskId, unitVersionId, courseId, accountId, gigaBoxSlot);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUnitFork(taskId, unitVersionId, courseId, accountId, gigaBoxSlot);
  }
};

PrometheusServiceClient.prototype.send_createUnitFork = function(taskId, unitVersionId, courseId, accountId, gigaBoxSlot) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUnitFork', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createUnitFork_args();
  args.taskId = taskId;
  args.unitVersionId = unitVersionId;
  args.courseId = courseId;
  args.accountId = accountId;
  args.gigaBoxSlot = gigaBoxSlot;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createUnitFork = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createUnitFork_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null)
};
PrometheusServiceClient.prototype.getUnitGuides = function(unitVersionId, isTeacher, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitGuides(unitVersionId, isTeacher);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitGuides(unitVersionId, isTeacher);
  }
};

PrometheusServiceClient.prototype.send_getUnitGuides = function(unitVersionId, isTeacher) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitGuides', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitGuides_args();
  args.unitVersionId = unitVersionId;
  args.isTeacher = isTeacher;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitGuides = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitGuides_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.nge) {
    return callback(result.nge);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitGuides failed: unknown result');
};
PrometheusServiceClient.prototype.getUnitForkByProjectId = function(projectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitForkByProjectId(projectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitForkByProjectId(projectId);
  }
};

PrometheusServiceClient.prototype.send_getUnitForkByProjectId = function(projectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitForkByProjectId', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitForkByProjectId_args();
  args.projectId = projectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitForkByProjectId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitForkByProjectId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitForkByProjectId failed: unknown result');
};
PrometheusServiceClient.prototype.getUnitForksByProjectIds = function(projectIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitForksByProjectIds(projectIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitForksByProjectIds(projectIds);
  }
};

PrometheusServiceClient.prototype.send_getUnitForksByProjectIds = function(projectIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitForksByProjectIds', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitForksByProjectIds_args();
  args.projectIds = projectIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitForksByProjectIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitForksByProjectIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitForksByProjectIds failed: unknown result');
};
PrometheusServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PrometheusServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PrometheusServiceProcessor.prototype.process_getCoursesByModuleIds = function(seqid, input, output) {
  var args = new PrometheusService_getCoursesByModuleIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoursesByModuleIds.length === 1) {
    Q.fcall(this._handler.getCoursesByModuleIds, args.ids)
      .then(function(result) {
        var result = new PrometheusService_getCoursesByModuleIds_result({success: result});
        output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getCoursesByModuleIds_result(err);
        output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCoursesByModuleIds(args.ids,  function (err, result) {
      var result = new PrometheusService_getCoursesByModuleIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getCourses = function(seqid, input, output) {
  var args = new PrometheusService_getCourses_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCourses.length === 2) {
    Q.fcall(this._handler.getCourses, args.ids, args.withModules)
      .then(function(result) {
        var result = new PrometheusService_getCourses_result({success: result});
        output.writeMessageBegin("getCourses", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getCourses_result(err);
        output.writeMessageBegin("getCourses", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCourses(args.ids, args.withModules,  function (err, result) {
      var result = new PrometheusService_getCourses_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCourses", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_createCourse = function(seqid, input, output) {
  var args = new PrometheusService_createCourse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createCourse.length === 1) {
    Q.fcall(this._handler.createCourse, args.details)
      .then(function(result) {
        var result = new PrometheusService_createCourse_result({success: result});
        output.writeMessageBegin("createCourse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_createCourse_result(err);
        output.writeMessageBegin("createCourse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createCourse(args.details,  function (err, result) {
      var result = new PrometheusService_createCourse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createCourse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_updateCourse = function(seqid, input, output) {
  var args = new PrometheusService_updateCourse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateCourse.length === 2) {
    Q.fcall(this._handler.updateCourse, args.id, args.details)
      .then(function(result) {
        var result = new PrometheusService_updateCourse_result({success: result});
        output.writeMessageBegin("updateCourse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_updateCourse_result(err);
        output.writeMessageBegin("updateCourse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateCourse(args.id, args.details,  function (err, result) {
      var result = new PrometheusService_updateCourse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateCourse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_setCourseModules = function(seqid, input, output) {
  var args = new PrometheusService_setCourseModules_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setCourseModules.length === 2) {
    Q.fcall(this._handler.setCourseModules, args.id, args.moduleIds)
      .then(function(result) {
        var result = new PrometheusService_setCourseModules_result({success: result});
        output.writeMessageBegin("setCourseModules", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_setCourseModules_result(err);
        output.writeMessageBegin("setCourseModules", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setCourseModules(args.id, args.moduleIds,  function (err, result) {
      var result = new PrometheusService_setCourseModules_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setCourseModules", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_deleteCourse = function(seqid, input, output) {
  var args = new PrometheusService_deleteCourse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteCourse.length === 1) {
    Q.fcall(this._handler.deleteCourse, args.id)
      .then(function(result) {
        var result = new PrometheusService_deleteCourse_result({success: result});
        output.writeMessageBegin("deleteCourse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_deleteCourse_result(err);
        output.writeMessageBegin("deleteCourse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteCourse(args.id,  function (err, result) {
      var result = new PrometheusService_deleteCourse_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteCourse", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getModules = function(seqid, input, output) {
  var args = new PrometheusService_getModules_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getModules.length === 2) {
    Q.fcall(this._handler.getModules, args.ids, args.withUnits)
      .then(function(result) {
        var result = new PrometheusService_getModules_result({success: result});
        output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getModules_result(err);
        output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getModules(args.ids, args.withUnits,  function (err, result) {
      var result = new PrometheusService_getModules_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getModuleByUnitId = function(seqid, input, output) {
  var args = new PrometheusService_getModuleByUnitId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getModuleByUnitId.length === 1) {
    Q.fcall(this._handler.getModuleByUnitId, args.unitId)
      .then(function(result) {
        var result = new PrometheusService_getModuleByUnitId_result({success: result});
        output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getModuleByUnitId_result(err);
        output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getModuleByUnitId(args.unitId,  function (err, result) {
      var result = new PrometheusService_getModuleByUnitId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_createModule = function(seqid, input, output) {
  var args = new PrometheusService_createModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createModule.length === 1) {
    Q.fcall(this._handler.createModule, args.details)
      .then(function(result) {
        var result = new PrometheusService_createModule_result({success: result});
        output.writeMessageBegin("createModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_createModule_result(err);
        output.writeMessageBegin("createModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createModule(args.details,  function (err, result) {
      var result = new PrometheusService_createModule_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createModule", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_updateModule = function(seqid, input, output) {
  var args = new PrometheusService_updateModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateModule.length === 2) {
    Q.fcall(this._handler.updateModule, args.id, args.details)
      .then(function(result) {
        var result = new PrometheusService_updateModule_result({success: result});
        output.writeMessageBegin("updateModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_updateModule_result(err);
        output.writeMessageBegin("updateModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateModule(args.id, args.details,  function (err, result) {
      var result = new PrometheusService_updateModule_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateModule", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_deleteModule = function(seqid, input, output) {
  var args = new PrometheusService_deleteModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteModule.length === 1) {
    Q.fcall(this._handler.deleteModule, args.id)
      .then(function(result) {
        var result = new PrometheusService_deleteModule_result({success: result});
        output.writeMessageBegin("deleteModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_deleteModule_result(err);
        output.writeMessageBegin("deleteModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteModule(args.id,  function (err, result) {
      var result = new PrometheusService_deleteModule_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteModule", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_addUnitToModule = function(seqid, input, output) {
  var args = new PrometheusService_addUnitToModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addUnitToModule.length === 2) {
    Q.fcall(this._handler.addUnitToModule, args.moduleId, args.unitDetails)
      .then(function(result) {
        var result = new PrometheusService_addUnitToModule_result({success: result});
        output.writeMessageBegin("addUnitToModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_addUnitToModule_result(err);
        output.writeMessageBegin("addUnitToModule", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addUnitToModule(args.moduleId, args.unitDetails,  function (err, result) {
      var result = new PrometheusService_addUnitToModule_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addUnitToModule", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_updateUnit = function(seqid, input, output) {
  var args = new PrometheusService_updateUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUnit.length === 2) {
    Q.fcall(this._handler.updateUnit, args.id, args.details)
      .then(function(result) {
        var result = new PrometheusService_updateUnit_result({success: result});
        output.writeMessageBegin("updateUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_updateUnit_result(err);
        output.writeMessageBegin("updateUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUnit(args.id, args.details,  function (err, result) {
      var result = new PrometheusService_updateUnit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateUnit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_publishUnit = function(seqid, input, output) {
  var args = new PrometheusService_publishUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.publishUnit.length === 4) {
    Q.fcall(this._handler.publishUnit, args.taskId, args.unitId, args.projectId, args.stackVersionId)
      .then(function(result) {
        var result = new PrometheusService_publishUnit_result({success: result});
        output.writeMessageBegin("publishUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_publishUnit_result(err);
        output.writeMessageBegin("publishUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.publishUnit(args.taskId, args.unitId, args.projectId, args.stackVersionId,  function (err, result) {
      var result = new PrometheusService_publishUnit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("publishUnit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_changeStackVersionInUnit = function(seqid, input, output) {
  var args = new PrometheusService_changeStackVersionInUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeStackVersionInUnit.length === 2) {
    Q.fcall(this._handler.changeStackVersionInUnit, args.unitId, args.stackVersionId)
      .then(function(result) {
        var result = new PrometheusService_changeStackVersionInUnit_result({success: result});
        output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_changeStackVersionInUnit_result(err);
        output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeStackVersionInUnit(args.unitId, args.stackVersionId,  function (err, result) {
      var result = new PrometheusService_changeStackVersionInUnit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_removeUnit = function(seqid, input, output) {
  var args = new PrometheusService_removeUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeUnit.length === 1) {
    Q.fcall(this._handler.removeUnit, args.id)
      .then(function(result) {
        var result = new PrometheusService_removeUnit_result({success: result});
        output.writeMessageBegin("removeUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_removeUnit_result(err);
        output.writeMessageBegin("removeUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeUnit(args.id,  function (err, result) {
      var result = new PrometheusService_removeUnit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeUnit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getUnit = function(seqid, input, output) {
  var args = new PrometheusService_getUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnit.length === 1) {
    Q.fcall(this._handler.getUnit, args.id)
      .then(function(result) {
        var result = new PrometheusService_getUnit_result({success: result});
        output.writeMessageBegin("getUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getUnit_result(err);
        output.writeMessageBegin("getUnit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnit(args.id,  function (err, result) {
      var result = new PrometheusService_getUnit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUnit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_reorderUnits = function(seqid, input, output) {
  var args = new PrometheusService_reorderUnits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reorderUnits.length === 2) {
    Q.fcall(this._handler.reorderUnits, args.moduleId, args.unitIds)
      .then(function(result) {
        var result = new PrometheusService_reorderUnits_result({success: result});
        output.writeMessageBegin("reorderUnits", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_reorderUnits_result(err);
        output.writeMessageBegin("reorderUnits", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reorderUnits(args.moduleId, args.unitIds,  function (err, result) {
      var result = new PrometheusService_reorderUnits_result((err != null ? err : {success: result}));
      output.writeMessageBegin("reorderUnits", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_createUnitFork = function(seqid, input, output) {
  var args = new PrometheusService_createUnitFork_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUnitFork.length === 5) {
    Q.fcall(this._handler.createUnitFork, args.taskId, args.unitVersionId, args.courseId, args.accountId, args.gigaBoxSlot)
      .then(function(result) {
        var result = new PrometheusService_createUnitFork_result({success: result});
        output.writeMessageBegin("createUnitFork", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_createUnitFork_result(err);
        output.writeMessageBegin("createUnitFork", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUnitFork(args.taskId, args.unitVersionId, args.courseId, args.accountId, args.gigaBoxSlot,  function (err, result) {
      var result = new PrometheusService_createUnitFork_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createUnitFork", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getUnitGuides = function(seqid, input, output) {
  var args = new PrometheusService_getUnitGuides_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitGuides.length === 2) {
    Q.fcall(this._handler.getUnitGuides, args.unitVersionId, args.isTeacher)
      .then(function(result) {
        var result = new PrometheusService_getUnitGuides_result({success: result});
        output.writeMessageBegin("getUnitGuides", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getUnitGuides_result(err);
        output.writeMessageBegin("getUnitGuides", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitGuides(args.unitVersionId, args.isTeacher,  function (err, result) {
      var result = new PrometheusService_getUnitGuides_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUnitGuides", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getUnitForkByProjectId = function(seqid, input, output) {
  var args = new PrometheusService_getUnitForkByProjectId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitForkByProjectId.length === 1) {
    Q.fcall(this._handler.getUnitForkByProjectId, args.projectId)
      .then(function(result) {
        var result = new PrometheusService_getUnitForkByProjectId_result({success: result});
        output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getUnitForkByProjectId_result(err);
        output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitForkByProjectId(args.projectId,  function (err, result) {
      var result = new PrometheusService_getUnitForkByProjectId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PrometheusServiceProcessor.prototype.process_getUnitForksByProjectIds = function(seqid, input, output) {
  var args = new PrometheusService_getUnitForksByProjectIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitForksByProjectIds.length === 1) {
    Q.fcall(this._handler.getUnitForksByProjectIds, args.projectIds)
      .then(function(result) {
        var result = new PrometheusService_getUnitForksByProjectIds_result({success: result});
        output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new PrometheusService_getUnitForksByProjectIds_result(err);
        output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitForksByProjectIds(args.projectIds,  function (err, result) {
      var result = new PrometheusService_getUnitForksByProjectIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

