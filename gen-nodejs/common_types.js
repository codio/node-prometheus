//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ReplyToExchange = module.exports.ReplyToExchange = function(args) {
  this.taskId = null;
  this.exchange = null;
  this.routingKey = null;
  if (args) {
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taskId is unset!');
    }
    if (args.exchange !== undefined) {
      this.exchange = args.exchange;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field exchange is unset!');
    }
    if (args.routingKey !== undefined) {
      this.routingKey = args.routingKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field routingKey is unset!');
    }
  }
};
ReplyToExchange.prototype = {};
ReplyToExchange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchange = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.routingKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplyToExchange.prototype.write = function(output) {
  output.writeStructBegin('ReplyToExchange');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  if (this.exchange !== null && this.exchange !== undefined) {
    output.writeFieldBegin('exchange', Thrift.Type.STRING, 2);
    output.writeString(this.exchange);
    output.writeFieldEnd();
  }
  if (this.routingKey !== null && this.routingKey !== undefined) {
    output.writeFieldBegin('routingKey', Thrift.Type.STRING, 3);
    output.writeString(this.routingKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReplyToBrowser = module.exports.ReplyToBrowser = function(args) {
};
ReplyToBrowser.prototype = {};
ReplyToBrowser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplyToBrowser.prototype.write = function(output) {
  output.writeStructBegin('ReplyToBrowser');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReplyDestination = module.exports.ReplyDestination = function(args) {
  this.exchange = null;
  this.browser = null;
  if (args) {
    if (args.exchange !== undefined) {
      this.exchange = args.exchange;
    }
    if (args.browser !== undefined) {
      this.browser = args.browser;
    }
  }
};
ReplyDestination.prototype = {};
ReplyDestination.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.exchange = new ttypes.ReplyToExchange();
        this.exchange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.browser = new ttypes.ReplyToBrowser();
        this.browser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplyDestination.prototype.write = function(output) {
  output.writeStructBegin('ReplyDestination');
  if (this.exchange !== null && this.exchange !== undefined) {
    output.writeFieldBegin('exchange', Thrift.Type.STRUCT, 1);
    this.exchange.write(output);
    output.writeFieldEnd();
  }
  if (this.browser !== null && this.browser !== undefined) {
    output.writeFieldBegin('browser', Thrift.Type.STRUCT, 2);
    this.browser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReplyParameters = module.exports.ReplyParameters = function(args) {
  this.replyTo = null;
  this.passThrough = null;
  if (args) {
    if (args.replyTo !== undefined) {
      this.replyTo = args.replyTo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyTo is unset!');
    }
    if (args.passThrough !== undefined) {
      this.passThrough = args.passThrough;
    }
  }
};
ReplyParameters.prototype = {};
ReplyParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyTo = new ttypes.ReplyDestination();
        this.replyTo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passThrough = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReplyParameters.prototype.write = function(output) {
  output.writeStructBegin('ReplyParameters');
  if (this.replyTo !== null && this.replyTo !== undefined) {
    output.writeFieldBegin('replyTo', Thrift.Type.STRUCT, 1);
    this.replyTo.write(output);
    output.writeFieldEnd();
  }
  if (this.passThrough !== null && this.passThrough !== undefined) {
    output.writeFieldBegin('passThrough', Thrift.Type.STRING, 2);
    output.writeString(this.passThrough);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

