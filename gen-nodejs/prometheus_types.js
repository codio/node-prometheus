//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var unit_ttypes = require('./unit_types')
var module_ttypes = require('./module_types')
var course_ttypes = require('./course_types')


var ttypes = module.exports = {};
GetCourseResult = module.exports.GetCourseResult = function(args) {
  this.courses = null;
  this.modules = null;
  if (args) {
    if (args.courses !== undefined) {
      this.courses = args.courses;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field courses is unset!');
    }
    if (args.modules !== undefined) {
      this.modules = args.modules;
    }
  }
};
GetCourseResult.prototype = {};
GetCourseResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.courses = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new course_ttypes.Course();
          elem6.read(input);
          this.courses.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.modules = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = new module_ttypes.Module();
          val14.read(input);
          this.modules[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCourseResult.prototype.write = function(output) {
  output.writeStructBegin('GetCourseResult');
  if (this.courses !== null && this.courses !== undefined) {
    output.writeFieldBegin('courses', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.courses.length);
    for (var iter15 in this.courses)
    {
      if (this.courses.hasOwnProperty(iter15))
      {
        iter15 = this.courses[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.modules !== null && this.modules !== undefined) {
    output.writeFieldBegin('modules', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.modules));
    for (var kiter16 in this.modules)
    {
      if (this.modules.hasOwnProperty(kiter16))
      {
        var viter17 = this.modules[kiter16];
        output.writeString(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetModuleCourseInfoResult = module.exports.GetModuleCourseInfoResult = function(args) {
  this.moduleCourseInfos = null;
  if (args) {
    if (args.moduleCourseInfos !== undefined) {
      this.moduleCourseInfos = args.moduleCourseInfos;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleCourseInfos is unset!');
    }
  }
};
GetModuleCourseInfoResult.prototype = {};
GetModuleCourseInfoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.moduleCourseInfos = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          var _size26 = 0;
          var _rtmp330;
          val25 = [];
          var _etype29 = 0;
          _rtmp330 = input.readListBegin();
          _etype29 = _rtmp330.etype;
          _size26 = _rtmp330.size;
          for (var _i31 = 0; _i31 < _size26; ++_i31)
          {
            var elem32 = null;
            elem32 = new course_ttypes.CourseInfo();
            elem32.read(input);
            val25.push(elem32);
          }
          input.readListEnd();
          this.moduleCourseInfos[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetModuleCourseInfoResult.prototype.write = function(output) {
  output.writeStructBegin('GetModuleCourseInfoResult');
  if (this.moduleCourseInfos !== null && this.moduleCourseInfos !== undefined) {
    output.writeFieldBegin('moduleCourseInfos', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.moduleCourseInfos));
    for (var kiter33 in this.moduleCourseInfos)
    {
      if (this.moduleCourseInfos.hasOwnProperty(kiter33))
      {
        var viter34 = this.moduleCourseInfos[kiter33];
        output.writeString(kiter33);
        output.writeListBegin(Thrift.Type.STRUCT, viter34.length);
        for (var iter35 in viter34)
        {
          if (viter34.hasOwnProperty(iter35))
          {
            iter35 = viter34[iter35];
            iter35.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateCourseDetails = module.exports.UpdateCourseDetails = function(args) {
  this.name = null;
  this.description = null;
  this.longDescription = null;
  this.imageUrl = null;
  this.tags = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.longDescription !== undefined) {
      this.longDescription = args.longDescription;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
UpdateCourseDetails.prototype = {};
UpdateCourseDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.longDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size36 = 0;
        var _rtmp340;
        this.tags = [];
        var _etype39 = 0;
        _rtmp340 = input.readSetBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readString();
          this.tags.push(elem42);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateCourseDetails.prototype.write = function(output) {
  output.writeStructBegin('UpdateCourseDetails');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.longDescription !== null && this.longDescription !== undefined) {
    output.writeFieldBegin('longDescription', Thrift.Type.STRING, 3);
    output.writeString(this.longDescription);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter43 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter43))
      {
        iter43 = this.tags[iter43];
        output.writeString(iter43);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateModuleDetails = module.exports.UpdateModuleDetails = function(args) {
  this.name = null;
  this.description = null;
  this.longDescription = null;
  this.imageUrl = null;
  this.tags = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.longDescription !== undefined) {
      this.longDescription = args.longDescription;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
UpdateModuleDetails.prototype = {};
UpdateModuleDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.longDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size44 = 0;
        var _rtmp348;
        this.tags = [];
        var _etype47 = 0;
        _rtmp348 = input.readSetBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString();
          this.tags.push(elem50);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateModuleDetails.prototype.write = function(output) {
  output.writeStructBegin('UpdateModuleDetails');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.longDescription !== null && this.longDescription !== undefined) {
    output.writeFieldBegin('longDescription', Thrift.Type.STRING, 3);
    output.writeString(this.longDescription);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter51 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter51))
      {
        iter51 = this.tags[iter51];
        output.writeString(iter51);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateUnitDetails = module.exports.UpdateUnitDetails = function(args) {
  this.name = null;
  this.description = null;
  this.imageUrl = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
  }
};
UpdateUnitDetails.prototype = {};
UpdateUnitDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateUnitDetails.prototype.write = function(output) {
  output.writeStructBegin('UpdateUnitDetails');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 3);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeStackVersionInUnitResult = module.exports.ChangeStackVersionInUnitResult = function(args) {
  this.unitVersion = null;
  if (args) {
    if (args.unitVersion !== undefined) {
      this.unitVersion = args.unitVersion;
    }
  }
};
ChangeStackVersionInUnitResult.prototype = {};
ChangeStackVersionInUnitResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.unitVersion = new unit_ttypes.UnitVersion();
        this.unitVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeStackVersionInUnitResult.prototype.write = function(output) {
  output.writeStructBegin('ChangeStackVersionInUnitResult');
  if (this.unitVersion !== null && this.unitVersion !== undefined) {
    output.writeFieldBegin('unitVersion', Thrift.Type.STRUCT, 1);
    this.unitVersion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReorderConflictException = module.exports.ReorderConflictException = function(args) {
  Thrift.TException.call(this, "ReorderConflictException")
  this.name = "ReorderConflictException"
  this.currentModule = null;
  if (args) {
    if (args.currentModule !== undefined) {
      this.currentModule = args.currentModule;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currentModule is unset!');
    }
  }
};
Thrift.inherits(ReorderConflictException, Thrift.TException);
ReorderConflictException.prototype.name = 'ReorderConflictException';
ReorderConflictException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currentModule = new module_ttypes.Module();
        this.currentModule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReorderConflictException.prototype.write = function(output) {
  output.writeStructBegin('ReorderConflictException');
  if (this.currentModule !== null && this.currentModule !== undefined) {
    output.writeFieldBegin('currentModule', Thrift.Type.STRUCT, 1);
    this.currentModule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

