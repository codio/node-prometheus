//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var assessments_ttypes = require('./assessments_types');
var guides_ttypes = require('./guides_types');
var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var S3Address = module.exports.S3Address = function(args) {
  this.bucket = null;
  this.key = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bucket is unset!');
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
  }
};
S3Address.prototype = {};
S3Address.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bucket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

S3Address.prototype.write = function(output) {
  output.writeStructBegin('S3Address');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.STRING, 1);
    output.writeString(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublishStatusInProgress = module.exports.PublishStatusInProgress = function(args) {
  this.taskId = null;
  if (args) {
    if (args.taskId !== undefined && args.taskId !== null) {
      this.taskId = args.taskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taskId is unset!');
    }
  }
};
PublishStatusInProgress.prototype = {};
PublishStatusInProgress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublishStatusInProgress.prototype.write = function(output) {
  output.writeStructBegin('PublishStatusInProgress');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublishStatusComplete = module.exports.PublishStatusComplete = function(args) {
  this.stackVersionId = null;
  if (args) {
    if (args.stackVersionId !== undefined && args.stackVersionId !== null) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
PublishStatusComplete.prototype = {};
PublishStatusComplete.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublishStatusComplete.prototype.write = function(output) {
  output.writeStructBegin('PublishStatusComplete');
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 1);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublishStatusError = module.exports.PublishStatusError = function(args) {
  this.guidesErrors = null;
  if (args) {
    if (args.guidesErrors !== undefined && args.guidesErrors !== null) {
      this.guidesErrors = Thrift.copyMap(args.guidesErrors, [null]);
    }
  }
};
PublishStatusError.prototype = {};
PublishStatusError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.guidesErrors = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.guidesErrors[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublishStatusError.prototype.write = function(output) {
  output.writeStructBegin('PublishStatusError');
  if (this.guidesErrors !== null && this.guidesErrors !== undefined) {
    output.writeFieldBegin('guidesErrors', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.guidesErrors));
    for (var kiter8 in this.guidesErrors)
    {
      if (this.guidesErrors.hasOwnProperty(kiter8))
      {
        var viter9 = this.guidesErrors[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublishStatus = module.exports.PublishStatus = function(args) {
  this.inProgress = null;
  this.complete = null;
  this.error = null;
  this.changeStack = null;
  if (args) {
    if (args.inProgress !== undefined && args.inProgress !== null) {
      this.inProgress = new ttypes.PublishStatusInProgress(args.inProgress);
    }
    if (args.complete !== undefined && args.complete !== null) {
      this.complete = new ttypes.PublishStatusComplete(args.complete);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new ttypes.PublishStatusError(args.error);
    }
    if (args.changeStack !== undefined && args.changeStack !== null) {
      this.changeStack = new ttypes.PublishStatusComplete(args.changeStack);
    }
  }
};
PublishStatus.prototype = {};
PublishStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.inProgress = new ttypes.PublishStatusInProgress();
        this.inProgress.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.complete = new ttypes.PublishStatusComplete();
        this.complete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.PublishStatusError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeStack = new ttypes.PublishStatusComplete();
        this.changeStack.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublishStatus.prototype.write = function(output) {
  output.writeStructBegin('PublishStatus');
  if (this.inProgress !== null && this.inProgress !== undefined) {
    output.writeFieldBegin('inProgress', Thrift.Type.STRUCT, 1);
    this.inProgress.write(output);
    output.writeFieldEnd();
  }
  if (this.complete !== null && this.complete !== undefined) {
    output.writeFieldBegin('complete', Thrift.Type.STRUCT, 2);
    this.complete.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.changeStack !== null && this.changeStack !== undefined) {
    output.writeFieldBegin('changeStack', Thrift.Type.STRUCT, 4);
    this.changeStack.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Details = module.exports.Details = function(args) {
  this.name = null;
  this.description = null;
  this.imageUrl = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.imageUrl !== undefined && args.imageUrl !== null) {
      this.imageUrl = args.imageUrl;
    }
  }
};
Details.prototype = {};
Details.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Details.prototype.write = function(output) {
  output.writeStructBegin('Details');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 3);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Version = module.exports.Version = function(args) {
  this.id = null;
  this.status = null;
  this.createdAt = null;
  this.createdById = null;
  this.changelog = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.PublishStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createdAt is unset!');
    }
    if (args.createdById !== undefined && args.createdById !== null) {
      this.createdById = args.createdById;
    }
    if (args.changelog !== undefined && args.changelog !== null) {
      this.changelog = args.changelog;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.PublishStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createdById = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.changelog = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 3);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.createdById !== null && this.createdById !== undefined) {
    output.writeFieldBegin('createdById', Thrift.Type.STRING, 5);
    output.writeString(this.createdById);
    output.writeFieldEnd();
  }
  if (this.changelog !== null && this.changelog !== undefined) {
    output.writeFieldBegin('changelog', Thrift.Type.STRING, 6);
    output.writeString(this.changelog);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Assessment = module.exports.Assessment = function(args) {
  this.id = null;
  this.details = null;
  this.task = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new assessments_ttypes.Details(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.task !== undefined && args.task !== null) {
      this.task = new assessments_ttypes.Task(args.task);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field task is unset!');
    }
  }
};
Assessment.prototype = {};
Assessment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new assessments_ttypes.Details();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new assessments_ttypes.Task();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Assessment.prototype.write = function(output) {
  output.writeStructBegin('Assessment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 3);
    this.task.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Guides = module.exports.Guides = function(args) {
  this.playbackMetadataJson = null;
  this.sections = null;
  this.assessments = null;
  this.customStylesUrl = null;
  this.bookStructure = null;
  if (args) {
    if (args.playbackMetadataJson !== undefined && args.playbackMetadataJson !== null) {
      this.playbackMetadataJson = args.playbackMetadataJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field playbackMetadataJson is unset!');
    }
    if (args.sections !== undefined && args.sections !== null) {
      this.sections = Thrift.copyList(args.sections, [guides_ttypes.Section]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sections is unset!');
    }
    if (args.assessments !== undefined && args.assessments !== null) {
      this.assessments = Thrift.copyList(args.assessments, [ttypes.Assessment]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessments is unset!');
    }
    if (args.customStylesUrl !== undefined && args.customStylesUrl !== null) {
      this.customStylesUrl = args.customStylesUrl;
    }
    if (args.bookStructure !== undefined && args.bookStructure !== null) {
      this.bookStructure = args.bookStructure;
    }
  }
};
Guides.prototype = {};
Guides.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.playbackMetadataJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.sections = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new guides_ttypes.Section();
          elem16.read(input);
          this.sections.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size17 = 0;
        var _rtmp321;
        this.assessments = [];
        var _etype20 = 0;
        _rtmp321 = input.readListBegin();
        _etype20 = _rtmp321.etype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var elem23 = null;
          elem23 = new ttypes.Assessment();
          elem23.read(input);
          this.assessments.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.customStylesUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bookStructure = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Guides.prototype.write = function(output) {
  output.writeStructBegin('Guides');
  if (this.playbackMetadataJson !== null && this.playbackMetadataJson !== undefined) {
    output.writeFieldBegin('playbackMetadataJson', Thrift.Type.STRING, 1);
    output.writeString(this.playbackMetadataJson);
    output.writeFieldEnd();
  }
  if (this.sections !== null && this.sections !== undefined) {
    output.writeFieldBegin('sections', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sections.length);
    for (var iter24 in this.sections)
    {
      if (this.sections.hasOwnProperty(iter24))
      {
        iter24 = this.sections[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.assessments !== null && this.assessments !== undefined) {
    output.writeFieldBegin('assessments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.assessments.length);
    for (var iter25 in this.assessments)
    {
      if (this.assessments.hasOwnProperty(iter25))
      {
        iter25 = this.assessments[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customStylesUrl !== null && this.customStylesUrl !== undefined) {
    output.writeFieldBegin('customStylesUrl', Thrift.Type.STRING, 4);
    output.writeString(this.customStylesUrl);
    output.writeFieldEnd();
  }
  if (this.bookStructure !== null && this.bookStructure !== undefined) {
    output.writeFieldBegin('bookStructure', Thrift.Type.STRING, 5);
    output.writeString(this.bookStructure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StartableVersion = module.exports.StartableVersion = function(args) {
  this.id = null;
  this.stackVersionId = null;
  this.autogradeScriptPaths = [];
  this.userArchiveTemplate = null;
  this.guides = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.stackVersionId !== undefined && args.stackVersionId !== null) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
    if (args.autogradeScriptPaths !== undefined && args.autogradeScriptPaths !== null) {
      this.autogradeScriptPaths = Thrift.copyList(args.autogradeScriptPaths, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autogradeScriptPaths is unset!');
    }
    if (args.userArchiveTemplate !== undefined && args.userArchiveTemplate !== null) {
      this.userArchiveTemplate = new ttypes.S3Address(args.userArchiveTemplate);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userArchiveTemplate is unset!');
    }
    if (args.guides !== undefined && args.guides !== null) {
      this.guides = new ttypes.Guides(args.guides);
    }
  }
};
StartableVersion.prototype = {};
StartableVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.autogradeScriptPaths = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.autogradeScriptPaths.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.userArchiveTemplate = new ttypes.S3Address();
        this.userArchiveTemplate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.guides = new ttypes.Guides();
        this.guides.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartableVersion.prototype.write = function(output) {
  output.writeStructBegin('StartableVersion');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 2);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  if (this.autogradeScriptPaths !== null && this.autogradeScriptPaths !== undefined) {
    output.writeFieldBegin('autogradeScriptPaths', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.autogradeScriptPaths.length);
    for (var iter33 in this.autogradeScriptPaths)
    {
      if (this.autogradeScriptPaths.hasOwnProperty(iter33))
      {
        iter33 = this.autogradeScriptPaths[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userArchiveTemplate !== null && this.userArchiveTemplate !== undefined) {
    output.writeFieldBegin('userArchiveTemplate', Thrift.Type.STRUCT, 4);
    this.userArchiveTemplate.write(output);
    output.writeFieldEnd();
  }
  if (this.guides !== null && this.guides !== undefined) {
    output.writeFieldBegin('guides', Thrift.Type.STRUCT, 5);
    this.guides.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModuleUnit = module.exports.ModuleUnit = function(args) {
  this.id = null;
  this.details = null;
  this.versions = null;
  this.isRemoved = null;
  this.createdById = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.Details(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.versions !== undefined && args.versions !== null) {
      this.versions = Thrift.copyList(args.versions, [ttypes.Version]);
    }
    if (args.isRemoved !== undefined && args.isRemoved !== null) {
      this.isRemoved = args.isRemoved;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isRemoved is unset!');
    }
    if (args.createdById !== undefined && args.createdById !== null) {
      this.createdById = args.createdById;
    }
  }
};
ModuleUnit.prototype = {};
ModuleUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.Details();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.versions = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new ttypes.Version();
          elem40.read(input);
          this.versions.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isRemoved = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdById = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleUnit.prototype.write = function(output) {
  output.writeStructBegin('ModuleUnit');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.versions !== null && this.versions !== undefined) {
    output.writeFieldBegin('versions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.versions.length);
    for (var iter41 in this.versions)
    {
      if (this.versions.hasOwnProperty(iter41))
      {
        iter41 = this.versions[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isRemoved !== null && this.isRemoved !== undefined) {
    output.writeFieldBegin('isRemoved', Thrift.Type.BOOL, 5);
    output.writeBool(this.isRemoved);
    output.writeFieldEnd();
  }
  if (this.createdById !== null && this.createdById !== undefined) {
    output.writeFieldBegin('createdById', Thrift.Type.STRING, 6);
    output.writeString(this.createdById);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookBasedUnit = module.exports.BookBasedUnit = function(args) {
  this.id = null;
  this.details = null;
  this.bookUnitVersionId = null;
  this.pages = null;
  this.bookUnitId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.Details(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.bookUnitVersionId !== undefined && args.bookUnitVersionId !== null) {
      this.bookUnitVersionId = args.bookUnitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bookUnitVersionId is unset!');
    }
    if (args.pages !== undefined && args.pages !== null) {
      this.pages = Thrift.copyList(args.pages, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pages is unset!');
    }
    if (args.bookUnitId !== undefined && args.bookUnitId !== null) {
      this.bookUnitId = args.bookUnitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bookUnitId is unset!');
    }
  }
};
BookBasedUnit.prototype = {};
BookBasedUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.Details();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bookUnitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.pages = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.pages.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bookUnitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookBasedUnit.prototype.write = function(output) {
  output.writeStructBegin('BookBasedUnit');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.bookUnitVersionId !== null && this.bookUnitVersionId !== undefined) {
    output.writeFieldBegin('bookUnitVersionId', Thrift.Type.STRING, 3);
    output.writeString(this.bookUnitVersionId);
    output.writeFieldEnd();
  }
  if (this.pages !== null && this.pages !== undefined) {
    output.writeFieldBegin('pages', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.pages.length);
    for (var iter49 in this.pages)
    {
      if (this.pages.hasOwnProperty(iter49))
      {
        iter49 = this.pages[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bookUnitId !== null && this.bookUnitId !== undefined) {
    output.writeFieldBegin('bookUnitId', Thrift.Type.STRING, 5);
    output.writeString(this.bookUnitId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnitType = module.exports.UnitType = function(args) {
  this.normal = null;
  this.bookBased = null;
  if (args) {
    if (args.normal !== undefined && args.normal !== null) {
      this.normal = new ttypes.ModuleUnit(args.normal);
    }
    if (args.bookBased !== undefined && args.bookBased !== null) {
      this.bookBased = new ttypes.BookBasedUnit(args.bookBased);
    }
  }
};
UnitType.prototype = {};
UnitType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.normal = new ttypes.ModuleUnit();
        this.normal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bookBased = new ttypes.BookBasedUnit();
        this.bookBased.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnitType.prototype.write = function(output) {
  output.writeStructBegin('UnitType');
  if (this.normal !== null && this.normal !== undefined) {
    output.writeFieldBegin('normal', Thrift.Type.STRUCT, 1);
    this.normal.write(output);
    output.writeFieldEnd();
  }
  if (this.bookBased !== null && this.bookBased !== undefined) {
    output.writeFieldBegin('bookBased', Thrift.Type.STRUCT, 2);
    this.bookBased.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutogradeScriptStatusComplete = module.exports.AutogradeScriptStatusComplete = function(args) {
  this.returnCode = null;
  this.stdout = null;
  this.stderr = null;
  if (args) {
    if (args.returnCode !== undefined && args.returnCode !== null) {
      this.returnCode = args.returnCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnCode is unset!');
    }
    if (args.stdout !== undefined && args.stdout !== null) {
      this.stdout = args.stdout;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stdout is unset!');
    }
    if (args.stderr !== undefined && args.stderr !== null) {
      this.stderr = args.stderr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stderr is unset!');
    }
  }
};
AutogradeScriptStatusComplete.prototype = {};
AutogradeScriptStatusComplete.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.returnCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stdout = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stderr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutogradeScriptStatusComplete.prototype.write = function(output) {
  output.writeStructBegin('AutogradeScriptStatusComplete');
  if (this.returnCode !== null && this.returnCode !== undefined) {
    output.writeFieldBegin('returnCode', Thrift.Type.I32, 1);
    output.writeI32(this.returnCode);
    output.writeFieldEnd();
  }
  if (this.stdout !== null && this.stdout !== undefined) {
    output.writeFieldBegin('stdout', Thrift.Type.STRING, 2);
    output.writeString(this.stdout);
    output.writeFieldEnd();
  }
  if (this.stderr !== null && this.stderr !== undefined) {
    output.writeFieldBegin('stderr', Thrift.Type.STRING, 3);
    output.writeString(this.stderr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutogradeScriptStatus = module.exports.AutogradeScriptStatus = function(args) {
  this.complete = null;
  this.error = null;
  if (args) {
    if (args.complete !== undefined && args.complete !== null) {
      this.complete = new ttypes.AutogradeScriptStatusComplete(args.complete);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new common_ttypes.Empty(args.error);
    }
  }
};
AutogradeScriptStatus.prototype = {};
AutogradeScriptStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.complete = new ttypes.AutogradeScriptStatusComplete();
        this.complete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new common_ttypes.Empty();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutogradeScriptStatus.prototype.write = function(output) {
  output.writeStructBegin('AutogradeScriptStatus');
  if (this.complete !== null && this.complete !== undefined) {
    output.writeFieldBegin('complete', Thrift.Type.STRUCT, 1);
    this.complete.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AutogradeScriptResult = module.exports.AutogradeScriptResult = function(args) {
  this.status = null;
  this.points = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.AutogradeScriptStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    }
  }
};
AutogradeScriptResult.prototype = {};
AutogradeScriptResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.AutogradeScriptStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AutogradeScriptResult.prototype.write = function(output) {
  output.writeStructBegin('AutogradeScriptResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 2);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackSourceExisting = module.exports.StackSourceExisting = function(args) {
  this.stackVersionId = null;
  if (args) {
    if (args.stackVersionId !== undefined && args.stackVersionId !== null) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
StackSourceExisting.prototype = {};
StackSourceExisting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StackSourceExisting.prototype.write = function(output) {
  output.writeStructBegin('StackSourceExisting');
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 1);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackSourceNewStackVersion = module.exports.StackSourceNewStackVersion = function(args) {
  this.id = null;
  this.changelog = '';
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.changelog !== undefined && args.changelog !== null) {
      this.changelog = args.changelog;
    }
  }
};
StackSourceNewStackVersion.prototype = {};
StackSourceNewStackVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.changelog = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StackSourceNewStackVersion.prototype.write = function(output) {
  output.writeStructBegin('StackSourceNewStackVersion');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.changelog !== null && this.changelog !== undefined) {
    output.writeFieldBegin('changelog', Thrift.Type.STRING, 2);
    output.writeString(this.changelog);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackSourceNewStack = module.exports.StackSourceNewStack = function(args) {
  this.name = null;
  this.isPrivate = false;
  this.owner = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.isPrivate !== undefined && args.isPrivate !== null) {
      this.isPrivate = args.isPrivate;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
  }
};
StackSourceNewStack.prototype = {};
StackSourceNewStack.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isPrivate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StackSourceNewStack.prototype.write = function(output) {
  output.writeStructBegin('StackSourceNewStack');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.isPrivate !== null && this.isPrivate !== undefined) {
    output.writeFieldBegin('isPrivate', Thrift.Type.BOOL, 2);
    output.writeBool(this.isPrivate);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackSource = module.exports.StackSource = function(args) {
  this.existing = null;
  this.version = null;
  this.stack = null;
  if (args) {
    if (args.existing !== undefined && args.existing !== null) {
      this.existing = new ttypes.StackSourceExisting(args.existing);
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = new ttypes.StackSourceNewStackVersion(args.version);
    }
    if (args.stack !== undefined && args.stack !== null) {
      this.stack = new ttypes.StackSourceNewStack(args.stack);
    }
  }
};
StackSource.prototype = {};
StackSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.existing = new ttypes.StackSourceExisting();
        this.existing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.version = new ttypes.StackSourceNewStackVersion();
        this.version.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.stack = new ttypes.StackSourceNewStack();
        this.stack.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StackSource.prototype.write = function(output) {
  output.writeStructBegin('StackSource');
  if (this.existing !== null && this.existing !== undefined) {
    output.writeFieldBegin('existing', Thrift.Type.STRUCT, 1);
    this.existing.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRUCT, 2);
    this.version.write(output);
    output.writeFieldEnd();
  }
  if (this.stack !== null && this.stack !== undefined) {
    output.writeFieldBegin('stack', Thrift.Type.STRUCT, 3);
    this.stack.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

