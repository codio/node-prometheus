//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Details = module.exports.Details = function(args) {
  this.name = null;
  this.points = null;
  this.showName = false;
  this.instructions = '';
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.points !== undefined) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
    if (args.showName !== undefined) {
      this.showName = args.showName;
    }
    if (args.instructions !== undefined) {
      this.instructions = args.instructions;
    }
  }
};
Details.prototype = {};
Details.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.showName = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.instructions = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Details.prototype.write = function(output) {
  output.writeStructBegin('Details');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 2);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  if (this.showName !== null && this.showName !== undefined) {
    output.writeFieldBegin('showName', Thrift.Type.BOOL, 3);
    output.writeBool(this.showName);
    output.writeFieldEnd();
  }
  if (this.instructions !== null && this.instructions !== undefined) {
    output.writeFieldBegin('instructions', Thrift.Type.STRING, 4);
    output.writeString(this.instructions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChoiceOption = module.exports.ChoiceOption = function(args) {
  this.id = null;
  this.answer = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.answer !== undefined) {
      this.answer = args.answer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answer is unset!');
    }
  }
};
ChoiceOption.prototype = {};
ChoiceOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.answer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceOption.prototype.write = function(output) {
  output.writeStructBegin('ChoiceOption');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.answer !== null && this.answer !== undefined) {
    output.writeFieldBegin('answer', Thrift.Type.STRING, 2);
    output.writeString(this.answer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MultipleChoice = module.exports.MultipleChoice = function(args) {
  this.options = null;
  this.isMultipleResponse = null;
  if (args) {
    if (args.options !== undefined) {
      this.options = args.options;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
    if (args.isMultipleResponse !== undefined) {
      this.isMultipleResponse = args.isMultipleResponse;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMultipleResponse is unset!');
    }
  }
};
MultipleChoice.prototype = {};
MultipleChoice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.options = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ChoiceOption();
          elem6.read(input);
          this.options.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isMultipleResponse = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultipleChoice.prototype.write = function(output) {
  output.writeStructBegin('MultipleChoice');
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.options.length);
    for (var iter7 in this.options)
    {
      if (this.options.hasOwnProperty(iter7))
      {
        iter7 = this.options[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isMultipleResponse !== null && this.isMultipleResponse !== undefined) {
    output.writeFieldBegin('isMultipleResponse', Thrift.Type.BOOL, 2);
    output.writeBool(this.isMultipleResponse);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FillInBlanks = module.exports.FillInBlanks = function(args) {
  this.texts = null;
  this.selectableAnswers = null;
  if (args) {
    if (args.texts !== undefined) {
      this.texts = args.texts;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field texts is unset!');
    }
    if (args.selectableAnswers !== undefined) {
      this.selectableAnswers = args.selectableAnswers;
    }
  }
};
FillInBlanks.prototype = {};
FillInBlanks.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.texts = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.texts.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.selectableAnswers = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.selectableAnswers.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FillInBlanks.prototype.write = function(output) {
  output.writeStructBegin('FillInBlanks');
  if (this.texts !== null && this.texts !== undefined) {
    output.writeFieldBegin('texts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.texts.length);
    for (var iter22 in this.texts)
    {
      if (this.texts.hasOwnProperty(iter22))
      {
        iter22 = this.texts[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selectableAnswers !== null && this.selectableAnswers !== undefined) {
    output.writeFieldBegin('selectableAnswers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.selectableAnswers.length);
    for (var iter23 in this.selectableAnswers)
    {
      if (this.selectableAnswers.hasOwnProperty(iter23))
      {
        iter23 = this.selectableAnswers[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServerSideTest = module.exports.ServerSideTest = function(args) {
  this.oneTimeTest = false;
  if (args) {
    if (args.oneTimeTest !== undefined) {
      this.oneTimeTest = args.oneTimeTest;
    }
  }
};
ServerSideTest.prototype = {};
ServerSideTest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.oneTimeTest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerSideTest.prototype.write = function(output) {
  output.writeStructBegin('ServerSideTest');
  if (this.oneTimeTest !== null && this.oneTimeTest !== undefined) {
    output.writeFieldBegin('oneTimeTest', Thrift.Type.BOOL, 1);
    output.writeBool(this.oneTimeTest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Custom = module.exports.Custom = function(args) {
  this.oneTimeTest = false;
  if (args) {
    if (args.oneTimeTest !== undefined) {
      this.oneTimeTest = args.oneTimeTest;
    }
  }
};
Custom.prototype = {};
Custom.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.oneTimeTest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Custom.prototype.write = function(output) {
  output.writeStructBegin('Custom');
  if (this.oneTimeTest !== null && this.oneTimeTest !== undefined) {
    output.writeFieldBegin('oneTimeTest', Thrift.Type.BOOL, 1);
    output.writeBool(this.oneTimeTest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FreeText = module.exports.FreeText = function(args) {
  this.oneTimeTest = false;
  if (args) {
    if (args.oneTimeTest !== undefined) {
      this.oneTimeTest = args.oneTimeTest;
    }
  }
};
FreeText.prototype = {};
FreeText.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.oneTimeTest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FreeText.prototype.write = function(output) {
  output.writeStructBegin('FreeText');
  if (this.oneTimeTest !== null && this.oneTimeTest !== undefined) {
    output.writeFieldBegin('oneTimeTest', Thrift.Type.BOOL, 1);
    output.writeBool(this.oneTimeTest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Task = module.exports.Task = function(args) {
  this.multipleChoice = null;
  this.fillInBlanks = null;
  this.codeTest = null;
  this.codeOutputCompare = null;
  this.custom = null;
  this.freeText = null;
  if (args) {
    if (args.multipleChoice !== undefined) {
      this.multipleChoice = args.multipleChoice;
    }
    if (args.fillInBlanks !== undefined) {
      this.fillInBlanks = args.fillInBlanks;
    }
    if (args.codeTest !== undefined) {
      this.codeTest = args.codeTest;
    }
    if (args.codeOutputCompare !== undefined) {
      this.codeOutputCompare = args.codeOutputCompare;
    }
    if (args.custom !== undefined) {
      this.custom = args.custom;
    }
    if (args.freeText !== undefined) {
      this.freeText = args.freeText;
    }
  }
};
Task.prototype = {};
Task.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.multipleChoice = new ttypes.MultipleChoice();
        this.multipleChoice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fillInBlanks = new ttypes.FillInBlanks();
        this.fillInBlanks.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.codeTest = new ttypes.ServerSideTest();
        this.codeTest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.codeOutputCompare = new ttypes.ServerSideTest();
        this.codeOutputCompare.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new ttypes.Custom();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.freeText = new ttypes.FreeText();
        this.freeText.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Task.prototype.write = function(output) {
  output.writeStructBegin('Task');
  if (this.multipleChoice !== null && this.multipleChoice !== undefined) {
    output.writeFieldBegin('multipleChoice', Thrift.Type.STRUCT, 1);
    this.multipleChoice.write(output);
    output.writeFieldEnd();
  }
  if (this.fillInBlanks !== null && this.fillInBlanks !== undefined) {
    output.writeFieldBegin('fillInBlanks', Thrift.Type.STRUCT, 2);
    this.fillInBlanks.write(output);
    output.writeFieldEnd();
  }
  if (this.codeTest !== null && this.codeTest !== undefined) {
    output.writeFieldBegin('codeTest', Thrift.Type.STRUCT, 3);
    this.codeTest.write(output);
    output.writeFieldEnd();
  }
  if (this.codeOutputCompare !== null && this.codeOutputCompare !== undefined) {
    output.writeFieldBegin('codeOutputCompare', Thrift.Type.STRUCT, 4);
    this.codeOutputCompare.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 5);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  if (this.freeText !== null && this.freeText !== undefined) {
    output.writeFieldBegin('freeText', Thrift.Type.STRUCT, 6);
    this.freeText.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

