//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var guides_ttypes = require('./guides_types');
var unit_ttypes = require('./unit_types');
var module_ttypes = require('./module_types');
var course_ttypes = require('./course_types');
var unitfork_ttypes = require('./unitfork_types');
var assessments_ttypes = require('./assessments_types');
var assessmentResults_ttypes = require('./assessmentResults_types');


var ttypes = require('./prometheus_types');
//HELPER FUNCTIONS AND STRUCTURES

var PrometheusService_getCoursesByModuleIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
  }
};
PrometheusService_getCoursesByModuleIds_args.prototype = {};
PrometheusService_getCoursesByModuleIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.ids = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString();
          this.ids.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCoursesByModuleIds_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCoursesByModuleIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter41 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter41))
      {
        iter41 = this.ids[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getCoursesByModuleIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [course_ttypes.Course]);
    }
  }
};
PrometheusService_getCoursesByModuleIds_result.prototype = {};
PrometheusService_getCoursesByModuleIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.success = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new course_ttypes.Course();
          elem48.read(input);
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCoursesByModuleIds_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCoursesByModuleIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter49 in this.success)
    {
      if (this.success.hasOwnProperty(iter49))
      {
        iter49 = this.success[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getCourses_args = function(args) {
  this.ids = null;
  this.withModules = false;
  this.withRemoved = false;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.withModules !== undefined && args.withModules !== null) {
      this.withModules = args.withModules;
    }
    if (args.withRemoved !== undefined && args.withRemoved !== null) {
      this.withRemoved = args.withRemoved;
    }
  }
};
PrometheusService_getCourses_args.prototype = {};
PrometheusService_getCourses_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.ids = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readString();
          this.ids.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withModules = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withRemoved = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCourses_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCourses_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter57 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter57))
      {
        iter57 = this.ids[iter57];
        output.writeString(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withModules !== null && this.withModules !== undefined) {
    output.writeFieldBegin('withModules', Thrift.Type.BOOL, 2);
    output.writeBool(this.withModules);
    output.writeFieldEnd();
  }
  if (this.withRemoved !== null && this.withRemoved !== undefined) {
    output.writeFieldBegin('withRemoved', Thrift.Type.BOOL, 3);
    output.writeBool(this.withRemoved);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getCourses_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetCourseResult(args.success);
    }
  }
};
PrometheusService_getCourses_result.prototype = {};
PrometheusService_getCourses_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetCourseResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getCourses_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getCourses_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createCourse_args = function(args) {
  this.details = null;
  if (args) {
    if (args.details !== undefined && args.details !== null) {
      this.details = new course_ttypes.CourseDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_createCourse_args.prototype = {};
PrometheusService_createCourse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new course_ttypes.CourseDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createCourse_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createCourse_args');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 1);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createCourse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new course_ttypes.Course(args.success);
    }
  }
};
PrometheusService_createCourse_result.prototype = {};
PrometheusService_createCourse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new course_ttypes.Course();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createCourse_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createCourse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateCourse_args = function(args) {
  this.id = null;
  this.details = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.UpdateCourseDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_updateCourse_args.prototype = {};
PrometheusService_updateCourse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.UpdateCourseDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateCourse_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateCourse_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateCourse_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new course_ttypes.Course(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateCourse_result.prototype = {};
PrometheusService_updateCourse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new course_ttypes.Course();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateCourse_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateCourse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_setCourseModules_args = function(args) {
  this.id = null;
  this.moduleIds = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.moduleIds !== undefined && args.moduleIds !== null) {
      this.moduleIds = Thrift.copyList(args.moduleIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleIds is unset!');
    }
  }
};
PrometheusService_setCourseModules_args.prototype = {};
PrometheusService_setCourseModules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.moduleIds = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString();
          this.moduleIds.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_setCourseModules_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_setCourseModules_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.moduleIds !== null && this.moduleIds !== undefined) {
    output.writeFieldBegin('moduleIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.moduleIds.length);
    for (var iter65 in this.moduleIds)
    {
      if (this.moduleIds.hasOwnProperty(iter65))
      {
        iter65 = this.moduleIds[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_setCourseModules_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_setCourseModules_result.prototype = {};
PrometheusService_setCourseModules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_setCourseModules_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_setCourseModules_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_deleteCourse_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_deleteCourse_args.prototype = {};
PrometheusService_deleteCourse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteCourse_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteCourse_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_deleteCourse_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_deleteCourse_result.prototype = {};
PrometheusService_deleteCourse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteCourse_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteCourse_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getModules_args = function(args) {
  this.ids = null;
  this.withUnits = false;
  this.withRemoved = false;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.withUnits !== undefined && args.withUnits !== null) {
      this.withUnits = args.withUnits;
    }
    if (args.withRemoved !== undefined && args.withRemoved !== null) {
      this.withRemoved = args.withRemoved;
    }
  }
};
PrometheusService_getModules_args.prototype = {};
PrometheusService_getModules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.ids = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = input.readString();
          this.ids.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withUnits = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withRemoved = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModules_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModules_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter73 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter73))
      {
        iter73 = this.ids[iter73];
        output.writeString(iter73);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withUnits !== null && this.withUnits !== undefined) {
    output.writeFieldBegin('withUnits', Thrift.Type.BOOL, 2);
    output.writeBool(this.withUnits);
    output.writeFieldEnd();
  }
  if (this.withRemoved !== null && this.withRemoved !== undefined) {
    output.writeFieldBegin('withRemoved', Thrift.Type.BOOL, 3);
    output.writeBool(this.withRemoved);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getModules_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [module_ttypes.Module]);
    }
  }
};
PrometheusService_getModules_result.prototype = {};
PrometheusService_getModules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.success = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new module_ttypes.Module();
          elem80.read(input);
          this.success.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModules_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModules_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter81 in this.success)
    {
      if (this.success.hasOwnProperty(iter81))
      {
        iter81 = this.success[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getModuleByUnitId_args = function(args) {
  this.unitId = null;
  if (args) {
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
  }
};
PrometheusService_getModuleByUnitId_args.prototype = {};
PrometheusService_getModuleByUnitId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModuleByUnitId_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModuleByUnitId_args');
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 1);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getModuleByUnitId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new module_ttypes.Module(args.success);
    }
  }
};
PrometheusService_getModuleByUnitId_result.prototype = {};
PrometheusService_getModuleByUnitId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new module_ttypes.Module();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getModuleByUnitId_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getModuleByUnitId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createModule_args = function(args) {
  this.details = null;
  if (args) {
    if (args.details !== undefined && args.details !== null) {
      this.details = new module_ttypes.ModuleDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_createModule_args.prototype = {};
PrometheusService_createModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new module_ttypes.ModuleDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createModule_args');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 1);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createModule_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new module_ttypes.Module(args.success);
    }
  }
};
PrometheusService_createModule_result.prototype = {};
PrometheusService_createModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new module_ttypes.Module();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateModule_args = function(args) {
  this.id = null;
  this.details = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.UpdateModuleDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_updateModule_args.prototype = {};
PrometheusService_updateModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.UpdateModuleDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateModule_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateModule_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new module_ttypes.Module(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateModule_result.prototype = {};
PrometheusService_updateModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new module_ttypes.Module();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_deleteModule_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_deleteModule_args.prototype = {};
PrometheusService_deleteModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteModule_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_deleteModule_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_deleteModule_result.prototype = {};
PrometheusService_deleteModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_deleteModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_deleteModule_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_addUnitToModule_args = function(args) {
  this.moduleId = null;
  this.unitDetails = null;
  if (args) {
    if (args.moduleId !== undefined && args.moduleId !== null) {
      this.moduleId = args.moduleId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleId is unset!');
    }
    if (args.unitDetails !== undefined && args.unitDetails !== null) {
      this.unitDetails = new unit_ttypes.Details(args.unitDetails);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitDetails is unset!');
    }
  }
};
PrometheusService_addUnitToModule_args.prototype = {};
PrometheusService_addUnitToModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unitDetails = new unit_ttypes.Details();
        this.unitDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_addUnitToModule_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_addUnitToModule_args');
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 1);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.unitDetails !== null && this.unitDetails !== undefined) {
    output.writeFieldBegin('unitDetails', Thrift.Type.STRUCT, 2);
    this.unitDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_addUnitToModule_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new unit_ttypes.ModuleUnit(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_addUnitToModule_result.prototype = {};
PrometheusService_addUnitToModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unit_ttypes.ModuleUnit();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_addUnitToModule_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_addUnitToModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateUnit_args = function(args) {
  this.id = null;
  this.details = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.UpdateUnitDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
PrometheusService_updateUnit_args.prototype = {};
PrometheusService_updateUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.UpdateUnitDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateUnit_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateUnit_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateUnit_result.prototype = {};
PrometheusService_updateUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateUnit_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_publishUnit_args = function(args) {
  this.replyParameters = null;
  this.unitId = null;
  this.projectId = null;
  this.stackVersionId = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
    if (args.stackVersionId !== undefined && args.stackVersionId !== null) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
PrometheusService_publishUnit_args.prototype = {};
PrometheusService_publishUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_publishUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_publishUnit_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 2);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 3);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 4);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_publishUnit_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_publishUnit_result.prototype = {};
PrometheusService_publishUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_publishUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_publishUnit_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_migrateFromS3Archive_args = function(args) {
  this.unitId = null;
  this.archiveS3Key = null;
  this.stackVersionId = null;
  if (args) {
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
    if (args.archiveS3Key !== undefined && args.archiveS3Key !== null) {
      this.archiveS3Key = args.archiveS3Key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field archiveS3Key is unset!');
    }
    if (args.stackVersionId !== undefined && args.stackVersionId !== null) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
PrometheusService_migrateFromS3Archive_args.prototype = {};
PrometheusService_migrateFromS3Archive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.archiveS3Key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_migrateFromS3Archive_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_migrateFromS3Archive_args');
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 1);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  if (this.archiveS3Key !== null && this.archiveS3Key !== undefined) {
    output.writeFieldBegin('archiveS3Key', Thrift.Type.STRING, 2);
    output.writeString(this.archiveS3Key);
    output.writeFieldEnd();
  }
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 3);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_migrateFromS3Archive_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_migrateFromS3Archive_result.prototype = {};
PrometheusService_migrateFromS3Archive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_migrateFromS3Archive_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_migrateFromS3Archive_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_changeStackVersionInUnit_args = function(args) {
  this.unitId = null;
  this.stackVersionId = null;
  if (args) {
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
    if (args.stackVersionId !== undefined && args.stackVersionId !== null) {
      this.stackVersionId = args.stackVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stackVersionId is unset!');
    }
  }
};
PrometheusService_changeStackVersionInUnit_args.prototype = {};
PrometheusService_changeStackVersionInUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stackVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_changeStackVersionInUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_changeStackVersionInUnit_args');
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 1);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  if (this.stackVersionId !== null && this.stackVersionId !== undefined) {
    output.writeFieldBegin('stackVersionId', Thrift.Type.STRING, 2);
    output.writeString(this.stackVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_changeStackVersionInUnit_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChangeStackVersionInUnitResult(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_changeStackVersionInUnit_result.prototype = {};
PrometheusService_changeStackVersionInUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChangeStackVersionInUnitResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_changeStackVersionInUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_changeStackVersionInUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_removeUnit_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_removeUnit_args.prototype = {};
PrometheusService_removeUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_removeUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_removeUnit_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_removeUnit_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_removeUnit_result.prototype = {};
PrometheusService_removeUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_removeUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_removeUnit_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnit_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_getUnit_args.prototype = {};
PrometheusService_getUnit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnit_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnit_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnit_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new unit_ttypes.ModuleUnit(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_getUnit_result.prototype = {};
PrometheusService_getUnit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unit_ttypes.ModuleUnit();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnit_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnits_args = function(args) {
  this.ids = null;
  this.withRemoved = false;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.withRemoved !== undefined && args.withRemoved !== null) {
      this.withRemoved = args.withRemoved;
    }
  }
};
PrometheusService_getUnits_args.prototype = {};
PrometheusService_getUnits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.ids = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readString();
          this.ids.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withRemoved = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnits_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnits_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter89 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter89))
      {
        iter89 = this.ids[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withRemoved !== null && this.withRemoved !== undefined) {
    output.writeFieldBegin('withRemoved', Thrift.Type.BOOL, 2);
    output.writeBool(this.withRemoved);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnits_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [unit_ttypes.ModuleUnit]);
    }
  }
};
PrometheusService_getUnits_result.prototype = {};
PrometheusService_getUnits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.success = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = new unit_ttypes.ModuleUnit();
          elem96.read(input);
          this.success.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnits_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter97 in this.success)
    {
      if (this.success.hasOwnProperty(iter97))
      {
        iter97 = this.success[iter97];
        iter97.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_reorderUnits_args = function(args) {
  this.moduleId = null;
  this.unitIds = null;
  if (args) {
    if (args.moduleId !== undefined && args.moduleId !== null) {
      this.moduleId = args.moduleId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleId is unset!');
    }
    if (args.unitIds !== undefined && args.unitIds !== null) {
      this.unitIds = Thrift.copyList(args.unitIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitIds is unset!');
    }
  }
};
PrometheusService_reorderUnits_args.prototype = {};
PrometheusService_reorderUnits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.unitIds = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readString();
          this.unitIds.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_reorderUnits_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_reorderUnits_args');
  if (this.moduleId !== null && this.moduleId !== undefined) {
    output.writeFieldBegin('moduleId', Thrift.Type.STRING, 1);
    output.writeString(this.moduleId);
    output.writeFieldEnd();
  }
  if (this.unitIds !== null && this.unitIds !== undefined) {
    output.writeFieldBegin('unitIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.unitIds.length);
    for (var iter105 in this.unitIds)
    {
      if (this.unitIds.hasOwnProperty(iter105))
      {
        iter105 = this.unitIds[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_reorderUnits_result = function(args) {
  this.nfe = null;
  this.rce = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ReorderConflictException) {
    this.rce = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.rce !== undefined && args.rce !== null) {
      this.rce = args.rce;
    }
  }
};
PrometheusService_reorderUnits_result.prototype = {};
PrometheusService_reorderUnits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rce = new ttypes.ReorderConflictException();
        this.rce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_reorderUnits_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_reorderUnits_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.rce !== null && this.rce !== undefined) {
    output.writeFieldBegin('rce', Thrift.Type.STRUCT, 2);
    this.rce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getLatestUnitVersions_args = function(args) {
  this.moduleIds = null;
  if (args) {
    if (args.moduleIds !== undefined && args.moduleIds !== null) {
      this.moduleIds = Thrift.copyList(args.moduleIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field moduleIds is unset!');
    }
  }
};
PrometheusService_getLatestUnitVersions_args.prototype = {};
PrometheusService_getLatestUnitVersions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.moduleIds = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readString();
          this.moduleIds.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getLatestUnitVersions_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getLatestUnitVersions_args');
  if (this.moduleIds !== null && this.moduleIds !== undefined) {
    output.writeFieldBegin('moduleIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.moduleIds.length);
    for (var iter113 in this.moduleIds)
    {
      if (this.moduleIds.hasOwnProperty(iter113))
      {
        iter113 = this.moduleIds[iter113];
        output.writeString(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getLatestUnitVersions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
PrometheusService_getLatestUnitVersions_result.prototype = {};
PrometheusService_getLatestUnitVersions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = {};
        var _ktype115 = 0;
        var _vtype116 = 0;
        _rtmp3118 = input.readMapBegin();
        _ktype115 = _rtmp3118.ktype;
        _vtype116 = _rtmp3118.vtype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var key120 = null;
          var val121 = null;
          key120 = input.readString();
          var _size122 = 0;
          var _rtmp3126;
          val121 = {};
          var _ktype123 = 0;
          var _vtype124 = 0;
          _rtmp3126 = input.readMapBegin();
          _ktype123 = _rtmp3126.ktype;
          _vtype124 = _rtmp3126.vtype;
          _size122 = _rtmp3126.size;
          for (var _i127 = 0; _i127 < _size122; ++_i127)
          {
            var key128 = null;
            var val129 = null;
            key128 = input.readString();
            val129 = input.readString();
            val121[key128] = val129;
          }
          input.readMapEnd();
          this.success[key120] = val121;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getLatestUnitVersions_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getLatestUnitVersions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter130 in this.success)
    {
      if (this.success.hasOwnProperty(kiter130))
      {
        var viter131 = this.success[kiter130];
        output.writeString(kiter130);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter131));
        for (var kiter132 in viter131)
        {
          if (viter131.hasOwnProperty(kiter132))
          {
            var viter133 = viter131[kiter132];
            output.writeString(kiter132);
            output.writeString(viter133);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitGuides_args = function(args) {
  this.unitVersionId = null;
  this.isTeacher = false;
  if (args) {
    if (args.unitVersionId !== undefined && args.unitVersionId !== null) {
      this.unitVersionId = args.unitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitVersionId is unset!');
    }
    if (args.isTeacher !== undefined && args.isTeacher !== null) {
      this.isTeacher = args.isTeacher;
    }
  }
};
PrometheusService_getUnitGuides_args.prototype = {};
PrometheusService_getUnitGuides_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isTeacher = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitGuides_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitGuides_args');
  if (this.unitVersionId !== null && this.unitVersionId !== undefined) {
    output.writeFieldBegin('unitVersionId', Thrift.Type.STRING, 1);
    output.writeString(this.unitVersionId);
    output.writeFieldEnd();
  }
  if (this.isTeacher !== null && this.isTeacher !== undefined) {
    output.writeFieldBegin('isTeacher', Thrift.Type.BOOL, 2);
    output.writeBool(this.isTeacher);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitGuides_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.nge = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.NoGuidesInUnitException) {
    this.nge = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new unit_ttypes.Guides(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.nge !== undefined && args.nge !== null) {
      this.nge = args.nge;
    }
  }
};
PrometheusService_getUnitGuides_result.prototype = {};
PrometheusService_getUnitGuides_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unit_ttypes.Guides();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nge = new ttypes.NoGuidesInUnitException();
        this.nge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitGuides_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitGuides_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.nge !== null && this.nge !== undefined) {
    output.writeFieldBegin('nge', Thrift.Type.STRUCT, 2);
    this.nge.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createProjectForAuthor_args = function(args) {
  this.replyParameters = null;
  this.unitId = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = args.unitId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitId is unset!');
    }
  }
};
PrometheusService_createProjectForAuthor_args.prototype = {};
PrometheusService_createProjectForAuthor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.unitId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createProjectForAuthor_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createProjectForAuthor_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRING, 2);
    output.writeString(this.unitId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createProjectForAuthor_result = function(args) {
};
PrometheusService_createProjectForAuthor_result.prototype = {};
PrometheusService_createProjectForAuthor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createProjectForAuthor_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createProjectForAuthor_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createUnitFork_args = function(args) {
  this.replyParameters = null;
  this.id = null;
  this.unitVersionId = null;
  this.accountId = null;
  this.gigaBoxSlot = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.unitVersionId !== undefined && args.unitVersionId !== null) {
      this.unitVersionId = args.unitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitVersionId is unset!');
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accountId is unset!');
    }
    if (args.gigaBoxSlot !== undefined && args.gigaBoxSlot !== null) {
      this.gigaBoxSlot = args.gigaBoxSlot;
    }
  }
};
PrometheusService_createUnitFork_args.prototype = {};
PrometheusService_createUnitFork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gigaBoxSlot = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createUnitFork_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createUnitFork_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.unitVersionId !== null && this.unitVersionId !== undefined) {
    output.writeFieldBegin('unitVersionId', Thrift.Type.STRING, 3);
    output.writeString(this.unitVersionId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 4);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.gigaBoxSlot !== null && this.gigaBoxSlot !== undefined) {
    output.writeFieldBegin('gigaBoxSlot', Thrift.Type.STRING, 5);
    output.writeString(this.gigaBoxSlot);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_createUnitFork_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_createUnitFork_result.prototype = {};
PrometheusService_createUnitFork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_createUnitFork_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_createUnitFork_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitFork_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_getUnitFork_args.prototype = {};
PrometheusService_getUnitFork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitFork_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitFork_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitFork_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new unitfork_ttypes.UnitFork(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_getUnitFork_result.prototype = {};
PrometheusService_getUnitFork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unitfork_ttypes.UnitFork();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitFork_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitFork_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitForks_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
  }
};
PrometheusService_getUnitForks_args.prototype = {};
PrometheusService_getUnitForks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size134 = 0;
        var _rtmp3138;
        this.ids = [];
        var _etype137 = 0;
        _rtmp3138 = input.readListBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = input.readString();
          this.ids.push(elem140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForks_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForks_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter141 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter141))
      {
        iter141 = this.ids[iter141];
        output.writeString(iter141);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitForks_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [unitfork_ttypes.UnitFork]);
    }
  }
};
PrometheusService_getUnitForks_result.prototype = {};
PrometheusService_getUnitForks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.success = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = new unitfork_ttypes.UnitFork();
          elem148.read(input);
          this.success.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForks_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter149 in this.success)
    {
      if (this.success.hasOwnProperty(iter149))
      {
        iter149 = this.success[iter149];
        iter149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitForkByProjectId_args = function(args) {
  this.projectId = null;
  if (args) {
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
  }
};
PrometheusService_getUnitForkByProjectId_args.prototype = {};
PrometheusService_getUnitForkByProjectId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForkByProjectId_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForkByProjectId_args');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 1);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitForkByProjectId_result = function(args) {
  this.success = null;
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new unitfork_ttypes.UnitFork(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_getUnitForkByProjectId_result.prototype = {};
PrometheusService_getUnitForkByProjectId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new unitfork_ttypes.UnitFork();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForkByProjectId_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForkByProjectId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitForksByProjectIds_args = function(args) {
  this.projectIds = null;
  if (args) {
    if (args.projectIds !== undefined && args.projectIds !== null) {
      this.projectIds = Thrift.copyList(args.projectIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectIds is unset!');
    }
  }
};
PrometheusService_getUnitForksByProjectIds_args.prototype = {};
PrometheusService_getUnitForksByProjectIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.projectIds = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = input.readString();
          this.projectIds.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForksByProjectIds_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForksByProjectIds_args');
  if (this.projectIds !== null && this.projectIds !== undefined) {
    output.writeFieldBegin('projectIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.projectIds.length);
    for (var iter157 in this.projectIds)
    {
      if (this.projectIds.hasOwnProperty(iter157))
      {
        iter157 = this.projectIds[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getUnitForksByProjectIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [unitfork_ttypes.UnitFork]);
    }
  }
};
PrometheusService_getUnitForksByProjectIds_result.prototype = {};
PrometheusService_getUnitForksByProjectIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.success = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = new unitfork_ttypes.UnitFork();
          elem164.read(input);
          this.success.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getUnitForksByProjectIds_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getUnitForksByProjectIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter165 in this.success)
    {
      if (this.success.hasOwnProperty(iter165))
      {
        iter165 = this.success[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_restoreUnitForkContent_args = function(args) {
  this.replyParameters = null;
  this.userId = null;
  this.unitForkProjectId = null;
  this.folders = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userId is unset!');
    }
    if (args.unitForkProjectId !== undefined && args.unitForkProjectId !== null) {
      this.unitForkProjectId = args.unitForkProjectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkProjectId is unset!');
    }
    if (args.folders !== undefined && args.folders !== null) {
      this.folders = Thrift.copyList(args.folders, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field folders is unset!');
    }
  }
};
PrometheusService_restoreUnitForkContent_args.prototype = {};
PrometheusService_restoreUnitForkContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkProjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.folders = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = input.readString();
          this.folders.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_restoreUnitForkContent_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_restoreUnitForkContent_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.unitForkProjectId !== null && this.unitForkProjectId !== undefined) {
    output.writeFieldBegin('unitForkProjectId', Thrift.Type.STRING, 3);
    output.writeString(this.unitForkProjectId);
    output.writeFieldEnd();
  }
  if (this.folders !== null && this.folders !== undefined) {
    output.writeFieldBegin('folders', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.folders.length);
    for (var iter173 in this.folders)
    {
      if (this.folders.hasOwnProperty(iter173))
      {
        iter173 = this.folders[iter173];
        output.writeString(iter173);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_restoreUnitForkContent_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_restoreUnitForkContent_result.prototype = {};
PrometheusService_restoreUnitForkContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_restoreUnitForkContent_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_restoreUnitForkContent_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_removeUnitFork_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PrometheusService_removeUnitFork_args.prototype = {};
PrometheusService_removeUnitFork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_removeUnitFork_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_removeUnitFork_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_removeUnitFork_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_removeUnitFork_result.prototype = {};
PrometheusService_removeUnitFork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_removeUnitFork_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_removeUnitFork_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_incrementTimeSpentInUnitFork_args = function(args) {
  this.unitForkId = null;
  this.seconds = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.seconds !== undefined && args.seconds !== null) {
      this.seconds = args.seconds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field seconds is unset!');
    }
  }
};
PrometheusService_incrementTimeSpentInUnitFork_args.prototype = {};
PrometheusService_incrementTimeSpentInUnitFork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_incrementTimeSpentInUnitFork_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_incrementTimeSpentInUnitFork_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.seconds !== null && this.seconds !== undefined) {
    output.writeFieldBegin('seconds', Thrift.Type.I32, 2);
    output.writeI32(this.seconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_incrementTimeSpentInUnitFork_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_incrementTimeSpentInUnitFork_result.prototype = {};
PrometheusService_incrementTimeSpentInUnitFork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_incrementTimeSpentInUnitFork_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_incrementTimeSpentInUnitFork_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_runAutogradeScript_args = function(args) {
  this.replyParameters = null;
  this.unitForkId = null;
  this.autogradeScriptPath = null;
  this.envVarJson = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.autogradeScriptPath !== undefined && args.autogradeScriptPath !== null) {
      this.autogradeScriptPath = args.autogradeScriptPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autogradeScriptPath is unset!');
    }
    if (args.envVarJson !== undefined && args.envVarJson !== null) {
      this.envVarJson = args.envVarJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field envVarJson is unset!');
    }
  }
};
PrometheusService_runAutogradeScript_args.prototype = {};
PrometheusService_runAutogradeScript_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.autogradeScriptPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.envVarJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_runAutogradeScript_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_runAutogradeScript_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 2);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.autogradeScriptPath !== null && this.autogradeScriptPath !== undefined) {
    output.writeFieldBegin('autogradeScriptPath', Thrift.Type.STRING, 3);
    output.writeString(this.autogradeScriptPath);
    output.writeFieldEnd();
  }
  if (this.envVarJson !== null && this.envVarJson !== undefined) {
    output.writeFieldBegin('envVarJson', Thrift.Type.STRING, 4);
    output.writeString(this.envVarJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_runAutogradeScript_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_runAutogradeScript_result.prototype = {};
PrometheusService_runAutogradeScript_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_runAutogradeScript_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_runAutogradeScript_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_runAutogradeScriptForAuthor_args = function(args) {
  this.replyParameters = null;
  this.projectId = null;
  this.autogradeScriptPath = null;
  this.envVarJson = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
    if (args.autogradeScriptPath !== undefined && args.autogradeScriptPath !== null) {
      this.autogradeScriptPath = args.autogradeScriptPath;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autogradeScriptPath is unset!');
    }
    if (args.envVarJson !== undefined && args.envVarJson !== null) {
      this.envVarJson = args.envVarJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field envVarJson is unset!');
    }
  }
};
PrometheusService_runAutogradeScriptForAuthor_args.prototype = {};
PrometheusService_runAutogradeScriptForAuthor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.autogradeScriptPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.envVarJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_runAutogradeScriptForAuthor_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_runAutogradeScriptForAuthor_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 2);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.autogradeScriptPath !== null && this.autogradeScriptPath !== undefined) {
    output.writeFieldBegin('autogradeScriptPath', Thrift.Type.STRING, 3);
    output.writeString(this.autogradeScriptPath);
    output.writeFieldEnd();
  }
  if (this.envVarJson !== null && this.envVarJson !== undefined) {
    output.writeFieldBegin('envVarJson', Thrift.Type.STRING, 4);
    output.writeString(this.envVarJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_runAutogradeScriptForAuthor_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_runAutogradeScriptForAuthor_result.prototype = {};
PrometheusService_runAutogradeScriptForAuthor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_runAutogradeScriptForAuthor_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_runAutogradeScriptForAuthor_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_storeAutogradePoints_args = function(args) {
  this.autogradeToken = null;
  this.points = null;
  if (args) {
    if (args.autogradeToken !== undefined && args.autogradeToken !== null) {
      this.autogradeToken = args.autogradeToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field autogradeToken is unset!');
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
  }
};
PrometheusService_storeAutogradePoints_args.prototype = {};
PrometheusService_storeAutogradePoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.autogradeToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_storeAutogradePoints_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_storeAutogradePoints_args');
  if (this.autogradeToken !== null && this.autogradeToken !== undefined) {
    output.writeFieldBegin('autogradeToken', Thrift.Type.STRING, 1);
    output.writeString(this.autogradeToken);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 2);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_storeAutogradePoints_result = function(args) {
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_storeAutogradePoints_result.prototype = {};
PrometheusService_storeAutogradePoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_storeAutogradePoints_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_storeAutogradePoints_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateUnitVersionInUnitFork_args = function(args) {
  this.replyParameters = null;
  this.unitForkId = null;
  this.unitVersionId = null;
  if (args) {
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.unitVersionId !== undefined && args.unitVersionId !== null) {
      this.unitVersionId = args.unitVersionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitVersionId is unset!');
    }
  }
};
PrometheusService_updateUnitVersionInUnitFork_args.prototype = {};
PrometheusService_updateUnitVersionInUnitFork_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unitVersionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateUnitVersionInUnitFork_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateUnitVersionInUnitFork_args');
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 1);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 2);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.unitVersionId !== null && this.unitVersionId !== undefined) {
    output.writeFieldBegin('unitVersionId', Thrift.Type.STRING, 3);
    output.writeString(this.unitVersionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_updateUnitVersionInUnitFork_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_updateUnitVersionInUnitFork_result.prototype = {};
PrometheusService_updateUnitVersionInUnitFork_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_updateUnitVersionInUnitFork_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_updateUnitVersionInUnitFork_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkMultipleChoiceAssessment_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.answerIds = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.answerIds !== undefined && args.answerIds !== null) {
      this.answerIds = Thrift.copyList(args.answerIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answerIds is unset!');
    }
  }
};
PrometheusService_checkMultipleChoiceAssessment_args.prototype = {};
PrometheusService_checkMultipleChoiceAssessment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size174 = 0;
        var _rtmp3178;
        this.answerIds = [];
        var _etype177 = 0;
        _rtmp3178 = input.readSetBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = input.readString();
          this.answerIds.push(elem180);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkMultipleChoiceAssessment_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkMultipleChoiceAssessment_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.answerIds !== null && this.answerIds !== undefined) {
    output.writeFieldBegin('answerIds', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.answerIds.length);
    for (var iter181 in this.answerIds)
    {
      if (this.answerIds.hasOwnProperty(iter181))
      {
        iter181 = this.answerIds[iter181];
        output.writeString(iter181);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkMultipleChoiceAssessment_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.ae = null;
  this.aaae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args instanceof ttypes.AssessmentAlreadyAnsweredException) {
    this.aaae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new assessmentResults_ttypes.MultipleChoiceAttempt(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
    if (args.aaae !== undefined && args.aaae !== null) {
      this.aaae = args.aaae;
    }
  }
};
PrometheusService_checkMultipleChoiceAssessment_result.prototype = {};
PrometheusService_checkMultipleChoiceAssessment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new assessmentResults_ttypes.MultipleChoiceAttempt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.aaae = new ttypes.AssessmentAlreadyAnsweredException();
        this.aaae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkMultipleChoiceAssessment_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkMultipleChoiceAssessment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  if (this.aaae !== null && this.aaae !== undefined) {
    output.writeFieldBegin('aaae', Thrift.Type.STRUCT, 3);
    this.aaae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkMultipleChoiceAssessmentForAuthor_args = function(args) {
  this.assessmentJson = null;
  this.answerIds = null;
  if (args) {
    if (args.assessmentJson !== undefined && args.assessmentJson !== null) {
      this.assessmentJson = args.assessmentJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentJson is unset!');
    }
    if (args.answerIds !== undefined && args.answerIds !== null) {
      this.answerIds = Thrift.copyList(args.answerIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answerIds is unset!');
    }
  }
};
PrometheusService_checkMultipleChoiceAssessmentForAuthor_args.prototype = {};
PrometheusService_checkMultipleChoiceAssessmentForAuthor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size182 = 0;
        var _rtmp3186;
        this.answerIds = [];
        var _etype185 = 0;
        _rtmp3186 = input.readSetBegin();
        _etype185 = _rtmp3186.etype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var elem188 = null;
          elem188 = input.readString();
          this.answerIds.push(elem188);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkMultipleChoiceAssessmentForAuthor_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkMultipleChoiceAssessmentForAuthor_args');
  if (this.assessmentJson !== null && this.assessmentJson !== undefined) {
    output.writeFieldBegin('assessmentJson', Thrift.Type.STRING, 1);
    output.writeString(this.assessmentJson);
    output.writeFieldEnd();
  }
  if (this.answerIds !== null && this.answerIds !== undefined) {
    output.writeFieldBegin('answerIds', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.answerIds.length);
    for (var iter189 in this.answerIds)
    {
      if (this.answerIds.hasOwnProperty(iter189))
      {
        iter189 = this.answerIds[iter189];
        output.writeString(iter189);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkMultipleChoiceAssessmentForAuthor_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new assessmentResults_ttypes.MultipleChoiceAttempt(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_checkMultipleChoiceAssessmentForAuthor_result.prototype = {};
PrometheusService_checkMultipleChoiceAssessmentForAuthor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new assessmentResults_ttypes.MultipleChoiceAttempt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkMultipleChoiceAssessmentForAuthor_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkMultipleChoiceAssessmentForAuthor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkFillInBlanksAssessment_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.answers = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.answers !== undefined && args.answers !== null) {
      this.answers = Thrift.copyList(args.answers, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answers is unset!');
    }
  }
};
PrometheusService_checkFillInBlanksAssessment_args.prototype = {};
PrometheusService_checkFillInBlanksAssessment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.answers = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = input.readString();
          this.answers.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkFillInBlanksAssessment_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkFillInBlanksAssessment_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.answers !== null && this.answers !== undefined) {
    output.writeFieldBegin('answers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.answers.length);
    for (var iter197 in this.answers)
    {
      if (this.answers.hasOwnProperty(iter197))
      {
        iter197 = this.answers[iter197];
        output.writeString(iter197);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkFillInBlanksAssessment_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.ae = null;
  this.aaae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args instanceof ttypes.AssessmentAlreadyAnsweredException) {
    this.aaae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new assessmentResults_ttypes.FillInBlanksAttempt(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
    if (args.aaae !== undefined && args.aaae !== null) {
      this.aaae = args.aaae;
    }
  }
};
PrometheusService_checkFillInBlanksAssessment_result.prototype = {};
PrometheusService_checkFillInBlanksAssessment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new assessmentResults_ttypes.FillInBlanksAttempt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.aaae = new ttypes.AssessmentAlreadyAnsweredException();
        this.aaae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkFillInBlanksAssessment_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkFillInBlanksAssessment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  if (this.aaae !== null && this.aaae !== undefined) {
    output.writeFieldBegin('aaae', Thrift.Type.STRUCT, 3);
    this.aaae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkFillInBlanksAssessmentForAuthor_args = function(args) {
  this.assessmentJson = null;
  this.answers = null;
  if (args) {
    if (args.assessmentJson !== undefined && args.assessmentJson !== null) {
      this.assessmentJson = args.assessmentJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentJson is unset!');
    }
    if (args.answers !== undefined && args.answers !== null) {
      this.answers = Thrift.copyList(args.answers, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answers is unset!');
    }
  }
};
PrometheusService_checkFillInBlanksAssessmentForAuthor_args.prototype = {};
PrometheusService_checkFillInBlanksAssessmentForAuthor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.answers = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = input.readString();
          this.answers.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkFillInBlanksAssessmentForAuthor_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkFillInBlanksAssessmentForAuthor_args');
  if (this.assessmentJson !== null && this.assessmentJson !== undefined) {
    output.writeFieldBegin('assessmentJson', Thrift.Type.STRING, 1);
    output.writeString(this.assessmentJson);
    output.writeFieldEnd();
  }
  if (this.answers !== null && this.answers !== undefined) {
    output.writeFieldBegin('answers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.answers.length);
    for (var iter205 in this.answers)
    {
      if (this.answers.hasOwnProperty(iter205))
      {
        iter205 = this.answers[iter205];
        output.writeString(iter205);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkFillInBlanksAssessmentForAuthor_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new assessmentResults_ttypes.FillInBlanksAttempt(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_checkFillInBlanksAssessmentForAuthor_result.prototype = {};
PrometheusService_checkFillInBlanksAssessmentForAuthor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new assessmentResults_ttypes.FillInBlanksAttempt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkFillInBlanksAssessmentForAuthor_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkFillInBlanksAssessmentForAuthor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_storeCodeTestPartialPoints_args = function(args) {
  this.partialPointsKey = null;
  this.points = null;
  if (args) {
    if (args.partialPointsKey !== undefined && args.partialPointsKey !== null) {
      this.partialPointsKey = args.partialPointsKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partialPointsKey is unset!');
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
  }
};
PrometheusService_storeCodeTestPartialPoints_args.prototype = {};
PrometheusService_storeCodeTestPartialPoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.partialPointsKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_storeCodeTestPartialPoints_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_storeCodeTestPartialPoints_args');
  if (this.partialPointsKey !== null && this.partialPointsKey !== undefined) {
    output.writeFieldBegin('partialPointsKey', Thrift.Type.STRING, 1);
    output.writeString(this.partialPointsKey);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 2);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_storeCodeTestPartialPoints_result = function(args) {
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_storeCodeTestPartialPoints_result.prototype = {};
PrometheusService_storeCodeTestPartialPoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_storeCodeTestPartialPoints_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_storeCodeTestPartialPoints_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeTestAssessment_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.replyParameters = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
  }
};
PrometheusService_checkCodeTestAssessment_args.prototype = {};
PrometheusService_checkCodeTestAssessment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeTestAssessment_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeTestAssessment_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 3);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeTestAssessment_result = function(args) {
  this.nfe = null;
  this.ae = null;
  this.aaae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args instanceof ttypes.AssessmentAlreadyAnsweredException) {
    this.aaae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
    if (args.aaae !== undefined && args.aaae !== null) {
      this.aaae = args.aaae;
    }
  }
};
PrometheusService_checkCodeTestAssessment_result.prototype = {};
PrometheusService_checkCodeTestAssessment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.aaae = new ttypes.AssessmentAlreadyAnsweredException();
        this.aaae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeTestAssessment_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeTestAssessment_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  if (this.aaae !== null && this.aaae !== undefined) {
    output.writeFieldBegin('aaae', Thrift.Type.STRUCT, 3);
    this.aaae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeTestAssessmentForAuthor_args = function(args) {
  this.projectId = null;
  this.assessmentJson = null;
  this.replyParameters = null;
  if (args) {
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
    if (args.assessmentJson !== undefined && args.assessmentJson !== null) {
      this.assessmentJson = args.assessmentJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentJson is unset!');
    }
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
  }
};
PrometheusService_checkCodeTestAssessmentForAuthor_args.prototype = {};
PrometheusService_checkCodeTestAssessmentForAuthor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeTestAssessmentForAuthor_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeTestAssessmentForAuthor_args');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 1);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.assessmentJson !== null && this.assessmentJson !== undefined) {
    output.writeFieldBegin('assessmentJson', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentJson);
    output.writeFieldEnd();
  }
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 3);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeTestAssessmentForAuthor_result = function(args) {
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_checkCodeTestAssessmentForAuthor_result.prototype = {};
PrometheusService_checkCodeTestAssessmentForAuthor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeTestAssessmentForAuthor_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeTestAssessmentForAuthor_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeOutputCompareAssessment_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.replyParameters = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
  }
};
PrometheusService_checkCodeOutputCompareAssessment_args.prototype = {};
PrometheusService_checkCodeOutputCompareAssessment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeOutputCompareAssessment_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeOutputCompareAssessment_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 3);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeOutputCompareAssessment_result = function(args) {
  this.nfe = null;
  this.ae = null;
  this.aaae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args instanceof ttypes.AssessmentAlreadyAnsweredException) {
    this.aaae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
    if (args.aaae !== undefined && args.aaae !== null) {
      this.aaae = args.aaae;
    }
  }
};
PrometheusService_checkCodeOutputCompareAssessment_result.prototype = {};
PrometheusService_checkCodeOutputCompareAssessment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.aaae = new ttypes.AssessmentAlreadyAnsweredException();
        this.aaae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeOutputCompareAssessment_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeOutputCompareAssessment_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  if (this.aaae !== null && this.aaae !== undefined) {
    output.writeFieldBegin('aaae', Thrift.Type.STRUCT, 3);
    this.aaae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args = function(args) {
  this.projectId = null;
  this.assessmentJson = null;
  this.replyParameters = null;
  if (args) {
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field projectId is unset!');
    }
    if (args.assessmentJson !== undefined && args.assessmentJson !== null) {
      this.assessmentJson = args.assessmentJson;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentJson is unset!');
    }
    if (args.replyParameters !== undefined && args.replyParameters !== null) {
      this.replyParameters = new common_ttypes.ReplyParameters(args.replyParameters);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field replyParameters is unset!');
    }
  }
};
PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args.prototype = {};
PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.replyParameters = new common_ttypes.ReplyParameters();
        this.replyParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 1);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.assessmentJson !== null && this.assessmentJson !== undefined) {
    output.writeFieldBegin('assessmentJson', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentJson);
    output.writeFieldEnd();
  }
  if (this.replyParameters !== null && this.replyParameters !== undefined) {
    output.writeFieldBegin('replyParameters', Thrift.Type.STRUCT, 3);
    this.replyParameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result = function(args) {
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result.prototype = {};
PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_submitCustomAssessmentResult_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.points = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
  }
};
PrometheusService_submitCustomAssessmentResult_args.prototype = {};
PrometheusService_submitCustomAssessmentResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_submitCustomAssessmentResult_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_submitCustomAssessmentResult_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 3);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_submitCustomAssessmentResult_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.ae = null;
  this.aaae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args instanceof ttypes.AssessmentAlreadyAnsweredException) {
    this.aaae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new assessmentResults_ttypes.CustomTaskAttempt(args.success);
    }
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
    if (args.aaae !== undefined && args.aaae !== null) {
      this.aaae = args.aaae;
    }
  }
};
PrometheusService_submitCustomAssessmentResult_result.prototype = {};
PrometheusService_submitCustomAssessmentResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new assessmentResults_ttypes.CustomTaskAttempt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.aaae = new ttypes.AssessmentAlreadyAnsweredException();
        this.aaae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_submitCustomAssessmentResult_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_submitCustomAssessmentResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  if (this.aaae !== null && this.aaae !== undefined) {
    output.writeFieldBegin('aaae', Thrift.Type.STRUCT, 3);
    this.aaae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_submitFreeTextAssessmentAnswer_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.answer = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.answer !== undefined && args.answer !== null) {
      this.answer = args.answer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answer is unset!');
    }
  }
};
PrometheusService_submitFreeTextAssessmentAnswer_args.prototype = {};
PrometheusService_submitFreeTextAssessmentAnswer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.answer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_submitFreeTextAssessmentAnswer_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_submitFreeTextAssessmentAnswer_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.answer !== null && this.answer !== undefined) {
    output.writeFieldBegin('answer', Thrift.Type.STRING, 3);
    output.writeString(this.answer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_submitFreeTextAssessmentAnswer_result = function(args) {
  this.nfe = null;
  this.ae = null;
  this.aaae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args instanceof ttypes.AssessmentAlreadyAnsweredException) {
    this.aaae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
    if (args.aaae !== undefined && args.aaae !== null) {
      this.aaae = args.aaae;
    }
  }
};
PrometheusService_submitFreeTextAssessmentAnswer_result.prototype = {};
PrometheusService_submitFreeTextAssessmentAnswer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.aaae = new ttypes.AssessmentAlreadyAnsweredException();
        this.aaae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_submitFreeTextAssessmentAnswer_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_submitFreeTextAssessmentAnswer_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  if (this.aaae !== null && this.aaae !== undefined) {
    output.writeFieldBegin('aaae', Thrift.Type.STRUCT, 3);
    this.aaae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_markFreeTextAssessment_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.answerId = null;
  this.points = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.answerId !== undefined && args.answerId !== null) {
      this.answerId = args.answerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field answerId is unset!');
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = args.points;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field points is unset!');
    }
  }
};
PrometheusService_markFreeTextAssessment_args.prototype = {};
PrometheusService_markFreeTextAssessment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.answerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.points = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_markFreeTextAssessment_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_markFreeTextAssessment_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.answerId !== null && this.answerId !== undefined) {
    output.writeFieldBegin('answerId', Thrift.Type.STRING, 3);
    output.writeString(this.answerId);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.I32, 4);
    output.writeI32(this.points);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_markFreeTextAssessment_result = function(args) {
  this.nfe = null;
  this.ae = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.ArgumentException) {
    this.ae = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = args.ae;
    }
  }
};
PrometheusService_markFreeTextAssessment_result.prototype = {};
PrometheusService_markFreeTextAssessment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.ArgumentException();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_markFreeTextAssessment_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_markFreeTextAssessment_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 2);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getAssessmentScores_args = function(args) {
  this.unitForkIds = null;
  if (args) {
    if (args.unitForkIds !== undefined && args.unitForkIds !== null) {
      this.unitForkIds = Thrift.copyList(args.unitForkIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkIds is unset!');
    }
  }
};
PrometheusService_getAssessmentScores_args.prototype = {};
PrometheusService_getAssessmentScores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.unitForkIds = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = input.readString();
          this.unitForkIds.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getAssessmentScores_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getAssessmentScores_args');
  if (this.unitForkIds !== null && this.unitForkIds !== undefined) {
    output.writeFieldBegin('unitForkIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.unitForkIds.length);
    for (var iter213 in this.unitForkIds)
    {
      if (this.unitForkIds.hasOwnProperty(iter213))
      {
        iter213 = this.unitForkIds[iter213];
        output.writeString(iter213);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getAssessmentScores_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
PrometheusService_getAssessmentScores_result.prototype = {};
PrometheusService_getAssessmentScores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size214 = 0;
        var _rtmp3218;
        this.success = {};
        var _ktype215 = 0;
        var _vtype216 = 0;
        _rtmp3218 = input.readMapBegin();
        _ktype215 = _rtmp3218.ktype;
        _vtype216 = _rtmp3218.vtype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var key220 = null;
          var val221 = null;
          key220 = input.readString();
          val221 = input.readI32();
          this.success[key220] = val221;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getAssessmentScores_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getAssessmentScores_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter222 in this.success)
    {
      if (this.success.hasOwnProperty(kiter222))
      {
        var viter223 = this.success[kiter222];
        output.writeString(kiter222);
        output.writeI32(viter223);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getAssessmentAnswers_args = function(args) {
  this.unitForkId = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
  }
};
PrometheusService_getAssessmentAnswers_args.prototype = {};
PrometheusService_getAssessmentAnswers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getAssessmentAnswers_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getAssessmentAnswers_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getAssessmentAnswers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [assessmentResults_ttypes.CheckResult]);
    }
  }
};
PrometheusService_getAssessmentAnswers_result.prototype = {};
PrometheusService_getAssessmentAnswers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size224 = 0;
        var _rtmp3228;
        this.success = {};
        var _ktype225 = 0;
        var _vtype226 = 0;
        _rtmp3228 = input.readMapBegin();
        _ktype225 = _rtmp3228.ktype;
        _vtype226 = _rtmp3228.vtype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var key230 = null;
          var val231 = null;
          key230 = input.readString();
          val231 = new assessmentResults_ttypes.CheckResult();
          val231.read(input);
          this.success[key230] = val231;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getAssessmentAnswers_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getAssessmentAnswers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter232 in this.success)
    {
      if (this.success.hasOwnProperty(kiter232))
      {
        var viter233 = this.success[kiter232];
        output.writeString(kiter232);
        viter233.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getAssessmentState_args = function(args) {
  this.unitForkId = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
  }
};
PrometheusService_getAssessmentState_args.prototype = {};
PrometheusService_getAssessmentState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getAssessmentState_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getAssessmentState_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_getAssessmentState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
PrometheusService_getAssessmentState_result.prototype = {};
PrometheusService_getAssessmentState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size234 = 0;
        var _rtmp3238;
        this.success = {};
        var _ktype235 = 0;
        var _vtype236 = 0;
        _rtmp3238 = input.readMapBegin();
        _ktype235 = _rtmp3238.ktype;
        _vtype236 = _rtmp3238.vtype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var key240 = null;
          var val241 = null;
          key240 = input.readString();
          val241 = input.readString();
          this.success[key240] = val241;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_getAssessmentState_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_getAssessmentState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter242 in this.success)
    {
      if (this.success.hasOwnProperty(kiter242))
      {
        var viter243 = this.success[kiter242];
        output.writeString(kiter242);
        output.writeString(viter243);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_storeAssessmentState_args = function(args) {
  this.unitForkId = null;
  this.assessmentId = null;
  this.state = null;
  if (args) {
    if (args.unitForkId !== undefined && args.unitForkId !== null) {
      this.unitForkId = args.unitForkId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitForkId is unset!');
    }
    if (args.assessmentId !== undefined && args.assessmentId !== null) {
      this.assessmentId = args.assessmentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assessmentId is unset!');
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field state is unset!');
    }
  }
};
PrometheusService_storeAssessmentState_args.prototype = {};
PrometheusService_storeAssessmentState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.unitForkId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.assessmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_storeAssessmentState_args.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_storeAssessmentState_args');
  if (this.unitForkId !== null && this.unitForkId !== undefined) {
    output.writeFieldBegin('unitForkId', Thrift.Type.STRING, 1);
    output.writeString(this.unitForkId);
    output.writeFieldEnd();
  }
  if (this.assessmentId !== null && this.assessmentId !== undefined) {
    output.writeFieldBegin('assessmentId', Thrift.Type.STRING, 2);
    output.writeString(this.assessmentId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusService_storeAssessmentState_result = function(args) {
  this.nfe = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args) {
    if (args.nfe !== undefined && args.nfe !== null) {
      this.nfe = args.nfe;
    }
  }
};
PrometheusService_storeAssessmentState_result.prototype = {};
PrometheusService_storeAssessmentState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrometheusService_storeAssessmentState_result.prototype.write = function(output) {
  output.writeStructBegin('PrometheusService_storeAssessmentState_result');
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrometheusServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PrometheusServiceClient.prototype = {};
PrometheusServiceClient.prototype.seqid = function() { return this._seqid; };
PrometheusServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
PrometheusServiceClient.prototype.getCoursesByModuleIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoursesByModuleIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoursesByModuleIds(ids);
  }
};

PrometheusServiceClient.prototype.send_getCoursesByModuleIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCoursesByModuleIds', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getCoursesByModuleIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getCoursesByModuleIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getCoursesByModuleIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoursesByModuleIds failed: unknown result');
};
PrometheusServiceClient.prototype.getCourses = function(ids, withModules, withRemoved, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCourses(ids, withModules, withRemoved);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCourses(ids, withModules, withRemoved);
  }
};

PrometheusServiceClient.prototype.send_getCourses = function(ids, withModules, withRemoved) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCourses', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getCourses_args();
  args.ids = ids;
  args.withModules = withModules;
  args.withRemoved = withRemoved;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getCourses = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getCourses_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCourses failed: unknown result');
};
PrometheusServiceClient.prototype.createCourse = function(details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createCourse(details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createCourse(details);
  }
};

PrometheusServiceClient.prototype.send_createCourse = function(details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createCourse', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createCourse_args();
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createCourse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createCourse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createCourse failed: unknown result');
};
PrometheusServiceClient.prototype.updateCourse = function(id, details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateCourse(id, details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateCourse(id, details);
  }
};

PrometheusServiceClient.prototype.send_updateCourse = function(id, details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateCourse', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateCourse_args();
  args.id = id;
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateCourse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateCourse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateCourse failed: unknown result');
};
PrometheusServiceClient.prototype.setCourseModules = function(id, moduleIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setCourseModules(id, moduleIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setCourseModules(id, moduleIds);
  }
};

PrometheusServiceClient.prototype.send_setCourseModules = function(id, moduleIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setCourseModules', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_setCourseModules_args();
  args.id = id;
  args.moduleIds = moduleIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_setCourseModules = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_setCourseModules_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.deleteCourse = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteCourse(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteCourse(id);
  }
};

PrometheusServiceClient.prototype.send_deleteCourse = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteCourse', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_deleteCourse_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_deleteCourse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_deleteCourse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.getModules = function(ids, withUnits, withRemoved, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getModules(ids, withUnits, withRemoved);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getModules(ids, withUnits, withRemoved);
  }
};

PrometheusServiceClient.prototype.send_getModules = function(ids, withUnits, withRemoved) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getModules', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getModules_args();
  args.ids = ids;
  args.withUnits = withUnits;
  args.withRemoved = withRemoved;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getModules = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getModules_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getModules failed: unknown result');
};
PrometheusServiceClient.prototype.getModuleByUnitId = function(unitId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getModuleByUnitId(unitId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getModuleByUnitId(unitId);
  }
};

PrometheusServiceClient.prototype.send_getModuleByUnitId = function(unitId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getModuleByUnitId', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getModuleByUnitId_args();
  args.unitId = unitId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getModuleByUnitId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getModuleByUnitId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getModuleByUnitId failed: unknown result');
};
PrometheusServiceClient.prototype.createModule = function(details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createModule(details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createModule(details);
  }
};

PrometheusServiceClient.prototype.send_createModule = function(details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createModule_args();
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createModule failed: unknown result');
};
PrometheusServiceClient.prototype.updateModule = function(id, details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateModule(id, details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateModule(id, details);
  }
};

PrometheusServiceClient.prototype.send_updateModule = function(id, details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateModule_args();
  args.id = id;
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateModule failed: unknown result');
};
PrometheusServiceClient.prototype.deleteModule = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteModule(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteModule(id);
  }
};

PrometheusServiceClient.prototype.send_deleteModule = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_deleteModule_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_deleteModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_deleteModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.addUnitToModule = function(moduleId, unitDetails, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addUnitToModule(moduleId, unitDetails);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addUnitToModule(moduleId, unitDetails);
  }
};

PrometheusServiceClient.prototype.send_addUnitToModule = function(moduleId, unitDetails) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addUnitToModule', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_addUnitToModule_args();
  args.moduleId = moduleId;
  args.unitDetails = unitDetails;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_addUnitToModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_addUnitToModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addUnitToModule failed: unknown result');
};
PrometheusServiceClient.prototype.updateUnit = function(id, details, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUnit(id, details);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUnit(id, details);
  }
};

PrometheusServiceClient.prototype.send_updateUnit = function(id, details) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateUnit_args();
  args.id = id;
  args.details = details;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.publishUnit = function(replyParameters, unitId, projectId, stackVersionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_publishUnit(replyParameters, unitId, projectId, stackVersionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_publishUnit(replyParameters, unitId, projectId, stackVersionId);
  }
};

PrometheusServiceClient.prototype.send_publishUnit = function(replyParameters, unitId, projectId, stackVersionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('publishUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_publishUnit_args();
  args.replyParameters = replyParameters;
  args.unitId = unitId;
  args.projectId = projectId;
  args.stackVersionId = stackVersionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_publishUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_publishUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.migrateFromS3Archive = function(unitId, archiveS3Key, stackVersionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_migrateFromS3Archive(unitId, archiveS3Key, stackVersionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_migrateFromS3Archive(unitId, archiveS3Key, stackVersionId);
  }
};

PrometheusServiceClient.prototype.send_migrateFromS3Archive = function(unitId, archiveS3Key, stackVersionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('migrateFromS3Archive', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_migrateFromS3Archive_args();
  args.unitId = unitId;
  args.archiveS3Key = archiveS3Key;
  args.stackVersionId = stackVersionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_migrateFromS3Archive = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_migrateFromS3Archive_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.changeStackVersionInUnit = function(unitId, stackVersionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeStackVersionInUnit(unitId, stackVersionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeStackVersionInUnit(unitId, stackVersionId);
  }
};

PrometheusServiceClient.prototype.send_changeStackVersionInUnit = function(unitId, stackVersionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeStackVersionInUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_changeStackVersionInUnit_args();
  args.unitId = unitId;
  args.stackVersionId = stackVersionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_changeStackVersionInUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_changeStackVersionInUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('changeStackVersionInUnit failed: unknown result');
};
PrometheusServiceClient.prototype.removeUnit = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeUnit(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeUnit(id);
  }
};

PrometheusServiceClient.prototype.send_removeUnit = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_removeUnit_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_removeUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_removeUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.getUnit = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnit(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnit(id);
  }
};

PrometheusServiceClient.prototype.send_getUnit = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnit', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnit_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnit failed: unknown result');
};
PrometheusServiceClient.prototype.getUnits = function(ids, withRemoved, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnits(ids, withRemoved);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnits(ids, withRemoved);
  }
};

PrometheusServiceClient.prototype.send_getUnits = function(ids, withRemoved) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnits', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnits_args();
  args.ids = ids;
  args.withRemoved = withRemoved;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnits failed: unknown result');
};
PrometheusServiceClient.prototype.reorderUnits = function(moduleId, unitIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reorderUnits(moduleId, unitIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reorderUnits(moduleId, unitIds);
  }
};

PrometheusServiceClient.prototype.send_reorderUnits = function(moduleId, unitIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reorderUnits', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_reorderUnits_args();
  args.moduleId = moduleId;
  args.unitIds = unitIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_reorderUnits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_reorderUnits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.rce) {
    return callback(result.rce);
  }
  callback(null);
};
PrometheusServiceClient.prototype.getLatestUnitVersions = function(moduleIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLatestUnitVersions(moduleIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLatestUnitVersions(moduleIds);
  }
};

PrometheusServiceClient.prototype.send_getLatestUnitVersions = function(moduleIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLatestUnitVersions', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getLatestUnitVersions_args();
  args.moduleIds = moduleIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getLatestUnitVersions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getLatestUnitVersions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLatestUnitVersions failed: unknown result');
};
PrometheusServiceClient.prototype.getUnitGuides = function(unitVersionId, isTeacher, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitGuides(unitVersionId, isTeacher);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitGuides(unitVersionId, isTeacher);
  }
};

PrometheusServiceClient.prototype.send_getUnitGuides = function(unitVersionId, isTeacher) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitGuides', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitGuides_args();
  args.unitVersionId = unitVersionId;
  args.isTeacher = isTeacher;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitGuides = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitGuides_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.nge) {
    return callback(result.nge);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitGuides failed: unknown result');
};
PrometheusServiceClient.prototype.createProjectForAuthor = function(replyParameters, unitId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createProjectForAuthor(replyParameters, unitId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createProjectForAuthor(replyParameters, unitId);
  }
};

PrometheusServiceClient.prototype.send_createProjectForAuthor = function(replyParameters, unitId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createProjectForAuthor', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createProjectForAuthor_args();
  args.replyParameters = replyParameters;
  args.unitId = unitId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createProjectForAuthor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createProjectForAuthor_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
PrometheusServiceClient.prototype.createUnitFork = function(replyParameters, id, unitVersionId, accountId, gigaBoxSlot, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUnitFork(replyParameters, id, unitVersionId, accountId, gigaBoxSlot);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUnitFork(replyParameters, id, unitVersionId, accountId, gigaBoxSlot);
  }
};

PrometheusServiceClient.prototype.send_createUnitFork = function(replyParameters, id, unitVersionId, accountId, gigaBoxSlot) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUnitFork', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_createUnitFork_args();
  args.replyParameters = replyParameters;
  args.id = id;
  args.unitVersionId = unitVersionId;
  args.accountId = accountId;
  args.gigaBoxSlot = gigaBoxSlot;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_createUnitFork = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_createUnitFork_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.getUnitFork = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitFork(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitFork(id);
  }
};

PrometheusServiceClient.prototype.send_getUnitFork = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitFork', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitFork_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitFork = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitFork_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitFork failed: unknown result');
};
PrometheusServiceClient.prototype.getUnitForks = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitForks(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitForks(ids);
  }
};

PrometheusServiceClient.prototype.send_getUnitForks = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitForks', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitForks_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitForks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitForks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitForks failed: unknown result');
};
PrometheusServiceClient.prototype.getUnitForkByProjectId = function(projectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitForkByProjectId(projectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitForkByProjectId(projectId);
  }
};

PrometheusServiceClient.prototype.send_getUnitForkByProjectId = function(projectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitForkByProjectId', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitForkByProjectId_args();
  args.projectId = projectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitForkByProjectId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitForkByProjectId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitForkByProjectId failed: unknown result');
};
PrometheusServiceClient.prototype.getUnitForksByProjectIds = function(projectIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnitForksByProjectIds(projectIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnitForksByProjectIds(projectIds);
  }
};

PrometheusServiceClient.prototype.send_getUnitForksByProjectIds = function(projectIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnitForksByProjectIds', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getUnitForksByProjectIds_args();
  args.projectIds = projectIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getUnitForksByProjectIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getUnitForksByProjectIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnitForksByProjectIds failed: unknown result');
};
PrometheusServiceClient.prototype.restoreUnitForkContent = function(replyParameters, userId, unitForkProjectId, folders, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_restoreUnitForkContent(replyParameters, userId, unitForkProjectId, folders);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_restoreUnitForkContent(replyParameters, userId, unitForkProjectId, folders);
  }
};

PrometheusServiceClient.prototype.send_restoreUnitForkContent = function(replyParameters, userId, unitForkProjectId, folders) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('restoreUnitForkContent', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_restoreUnitForkContent_args();
  args.replyParameters = replyParameters;
  args.userId = userId;
  args.unitForkProjectId = unitForkProjectId;
  args.folders = folders;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_restoreUnitForkContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_restoreUnitForkContent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.removeUnitFork = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeUnitFork(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeUnitFork(id);
  }
};

PrometheusServiceClient.prototype.send_removeUnitFork = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeUnitFork', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_removeUnitFork_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_removeUnitFork = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_removeUnitFork_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.incrementTimeSpentInUnitFork = function(unitForkId, seconds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_incrementTimeSpentInUnitFork(unitForkId, seconds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_incrementTimeSpentInUnitFork(unitForkId, seconds);
  }
};

PrometheusServiceClient.prototype.send_incrementTimeSpentInUnitFork = function(unitForkId, seconds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('incrementTimeSpentInUnitFork', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_incrementTimeSpentInUnitFork_args();
  args.unitForkId = unitForkId;
  args.seconds = seconds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_incrementTimeSpentInUnitFork = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_incrementTimeSpentInUnitFork_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.runAutogradeScript = function(replyParameters, unitForkId, autogradeScriptPath, envVarJson, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runAutogradeScript(replyParameters, unitForkId, autogradeScriptPath, envVarJson);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runAutogradeScript(replyParameters, unitForkId, autogradeScriptPath, envVarJson);
  }
};

PrometheusServiceClient.prototype.send_runAutogradeScript = function(replyParameters, unitForkId, autogradeScriptPath, envVarJson) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runAutogradeScript', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_runAutogradeScript_args();
  args.replyParameters = replyParameters;
  args.unitForkId = unitForkId;
  args.autogradeScriptPath = autogradeScriptPath;
  args.envVarJson = envVarJson;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_runAutogradeScript = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_runAutogradeScript_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.runAutogradeScriptForAuthor = function(replyParameters, projectId, autogradeScriptPath, envVarJson, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runAutogradeScriptForAuthor(replyParameters, projectId, autogradeScriptPath, envVarJson);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runAutogradeScriptForAuthor(replyParameters, projectId, autogradeScriptPath, envVarJson);
  }
};

PrometheusServiceClient.prototype.send_runAutogradeScriptForAuthor = function(replyParameters, projectId, autogradeScriptPath, envVarJson) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runAutogradeScriptForAuthor', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_runAutogradeScriptForAuthor_args();
  args.replyParameters = replyParameters;
  args.projectId = projectId;
  args.autogradeScriptPath = autogradeScriptPath;
  args.envVarJson = envVarJson;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_runAutogradeScriptForAuthor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_runAutogradeScriptForAuthor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.storeAutogradePoints = function(autogradeToken, points, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeAutogradePoints(autogradeToken, points);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeAutogradePoints(autogradeToken, points);
  }
};

PrometheusServiceClient.prototype.send_storeAutogradePoints = function(autogradeToken, points) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeAutogradePoints', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_storeAutogradePoints_args();
  args.autogradeToken = autogradeToken;
  args.points = points;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_storeAutogradePoints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_storeAutogradePoints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.updateUnitVersionInUnitFork = function(replyParameters, unitForkId, unitVersionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUnitVersionInUnitFork(replyParameters, unitForkId, unitVersionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUnitVersionInUnitFork(replyParameters, unitForkId, unitVersionId);
  }
};

PrometheusServiceClient.prototype.send_updateUnitVersionInUnitFork = function(replyParameters, unitForkId, unitVersionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUnitVersionInUnitFork', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_updateUnitVersionInUnitFork_args();
  args.replyParameters = replyParameters;
  args.unitForkId = unitForkId;
  args.unitVersionId = unitVersionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_updateUnitVersionInUnitFork = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_updateUnitVersionInUnitFork_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
PrometheusServiceClient.prototype.checkMultipleChoiceAssessment = function(unitForkId, assessmentId, answerIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkMultipleChoiceAssessment(unitForkId, assessmentId, answerIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkMultipleChoiceAssessment(unitForkId, assessmentId, answerIds);
  }
};

PrometheusServiceClient.prototype.send_checkMultipleChoiceAssessment = function(unitForkId, assessmentId, answerIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkMultipleChoiceAssessment', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkMultipleChoiceAssessment_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.answerIds = answerIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkMultipleChoiceAssessment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkMultipleChoiceAssessment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.aaae) {
    return callback(result.aaae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkMultipleChoiceAssessment failed: unknown result');
};
PrometheusServiceClient.prototype.checkMultipleChoiceAssessmentForAuthor = function(assessmentJson, answerIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkMultipleChoiceAssessmentForAuthor(assessmentJson, answerIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkMultipleChoiceAssessmentForAuthor(assessmentJson, answerIds);
  }
};

PrometheusServiceClient.prototype.send_checkMultipleChoiceAssessmentForAuthor = function(assessmentJson, answerIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkMultipleChoiceAssessmentForAuthor', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkMultipleChoiceAssessmentForAuthor_args();
  args.assessmentJson = assessmentJson;
  args.answerIds = answerIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkMultipleChoiceAssessmentForAuthor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkMultipleChoiceAssessmentForAuthor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkMultipleChoiceAssessmentForAuthor failed: unknown result');
};
PrometheusServiceClient.prototype.checkFillInBlanksAssessment = function(unitForkId, assessmentId, answers, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkFillInBlanksAssessment(unitForkId, assessmentId, answers);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkFillInBlanksAssessment(unitForkId, assessmentId, answers);
  }
};

PrometheusServiceClient.prototype.send_checkFillInBlanksAssessment = function(unitForkId, assessmentId, answers) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkFillInBlanksAssessment', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkFillInBlanksAssessment_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.answers = answers;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkFillInBlanksAssessment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkFillInBlanksAssessment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.aaae) {
    return callback(result.aaae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkFillInBlanksAssessment failed: unknown result');
};
PrometheusServiceClient.prototype.checkFillInBlanksAssessmentForAuthor = function(assessmentJson, answers, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkFillInBlanksAssessmentForAuthor(assessmentJson, answers);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkFillInBlanksAssessmentForAuthor(assessmentJson, answers);
  }
};

PrometheusServiceClient.prototype.send_checkFillInBlanksAssessmentForAuthor = function(assessmentJson, answers) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkFillInBlanksAssessmentForAuthor', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkFillInBlanksAssessmentForAuthor_args();
  args.assessmentJson = assessmentJson;
  args.answers = answers;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkFillInBlanksAssessmentForAuthor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkFillInBlanksAssessmentForAuthor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkFillInBlanksAssessmentForAuthor failed: unknown result');
};
PrometheusServiceClient.prototype.storeCodeTestPartialPoints = function(partialPointsKey, points, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeCodeTestPartialPoints(partialPointsKey, points);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeCodeTestPartialPoints(partialPointsKey, points);
  }
};

PrometheusServiceClient.prototype.send_storeCodeTestPartialPoints = function(partialPointsKey, points) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeCodeTestPartialPoints', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_storeCodeTestPartialPoints_args();
  args.partialPointsKey = partialPointsKey;
  args.points = points;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_storeCodeTestPartialPoints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_storeCodeTestPartialPoints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.checkCodeTestAssessment = function(unitForkId, assessmentId, replyParameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkCodeTestAssessment(unitForkId, assessmentId, replyParameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkCodeTestAssessment(unitForkId, assessmentId, replyParameters);
  }
};

PrometheusServiceClient.prototype.send_checkCodeTestAssessment = function(unitForkId, assessmentId, replyParameters) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkCodeTestAssessment', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkCodeTestAssessment_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.replyParameters = replyParameters;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkCodeTestAssessment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkCodeTestAssessment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.aaae) {
    return callback(result.aaae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.checkCodeTestAssessmentForAuthor = function(projectId, assessmentJson, replyParameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkCodeTestAssessmentForAuthor(projectId, assessmentJson, replyParameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkCodeTestAssessmentForAuthor(projectId, assessmentJson, replyParameters);
  }
};

PrometheusServiceClient.prototype.send_checkCodeTestAssessmentForAuthor = function(projectId, assessmentJson, replyParameters) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkCodeTestAssessmentForAuthor', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkCodeTestAssessmentForAuthor_args();
  args.projectId = projectId;
  args.assessmentJson = assessmentJson;
  args.replyParameters = replyParameters;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkCodeTestAssessmentForAuthor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkCodeTestAssessmentForAuthor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.checkCodeOutputCompareAssessment = function(unitForkId, assessmentId, replyParameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkCodeOutputCompareAssessment(unitForkId, assessmentId, replyParameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkCodeOutputCompareAssessment(unitForkId, assessmentId, replyParameters);
  }
};

PrometheusServiceClient.prototype.send_checkCodeOutputCompareAssessment = function(unitForkId, assessmentId, replyParameters) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkCodeOutputCompareAssessment', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkCodeOutputCompareAssessment_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.replyParameters = replyParameters;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkCodeOutputCompareAssessment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkCodeOutputCompareAssessment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.aaae) {
    return callback(result.aaae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.checkCodeOutputCompareAssessmentForAuthor = function(projectId, assessmentJson, replyParameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkCodeOutputCompareAssessmentForAuthor(projectId, assessmentJson, replyParameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkCodeOutputCompareAssessmentForAuthor(projectId, assessmentJson, replyParameters);
  }
};

PrometheusServiceClient.prototype.send_checkCodeOutputCompareAssessmentForAuthor = function(projectId, assessmentJson, replyParameters) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkCodeOutputCompareAssessmentForAuthor', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args();
  args.projectId = projectId;
  args.assessmentJson = assessmentJson;
  args.replyParameters = replyParameters;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_checkCodeOutputCompareAssessmentForAuthor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.submitCustomAssessmentResult = function(unitForkId, assessmentId, points, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitCustomAssessmentResult(unitForkId, assessmentId, points);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitCustomAssessmentResult(unitForkId, assessmentId, points);
  }
};

PrometheusServiceClient.prototype.send_submitCustomAssessmentResult = function(unitForkId, assessmentId, points) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitCustomAssessmentResult', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_submitCustomAssessmentResult_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.points = points;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_submitCustomAssessmentResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_submitCustomAssessmentResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.aaae) {
    return callback(result.aaae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('submitCustomAssessmentResult failed: unknown result');
};
PrometheusServiceClient.prototype.submitFreeTextAssessmentAnswer = function(unitForkId, assessmentId, answer, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitFreeTextAssessmentAnswer(unitForkId, assessmentId, answer);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitFreeTextAssessmentAnswer(unitForkId, assessmentId, answer);
  }
};

PrometheusServiceClient.prototype.send_submitFreeTextAssessmentAnswer = function(unitForkId, assessmentId, answer) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitFreeTextAssessmentAnswer', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_submitFreeTextAssessmentAnswer_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.answer = answer;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_submitFreeTextAssessmentAnswer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_submitFreeTextAssessmentAnswer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  if (null !== result.aaae) {
    return callback(result.aaae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.markFreeTextAssessment = function(unitForkId, assessmentId, answerId, points, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_markFreeTextAssessment(unitForkId, assessmentId, answerId, points);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_markFreeTextAssessment(unitForkId, assessmentId, answerId, points);
  }
};

PrometheusServiceClient.prototype.send_markFreeTextAssessment = function(unitForkId, assessmentId, answerId, points) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('markFreeTextAssessment', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_markFreeTextAssessment_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.answerId = answerId;
  args.points = points;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_markFreeTextAssessment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_markFreeTextAssessment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ae) {
    return callback(result.ae);
  }
  callback(null);
};
PrometheusServiceClient.prototype.getAssessmentScores = function(unitForkIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAssessmentScores(unitForkIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAssessmentScores(unitForkIds);
  }
};

PrometheusServiceClient.prototype.send_getAssessmentScores = function(unitForkIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAssessmentScores', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getAssessmentScores_args();
  args.unitForkIds = unitForkIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getAssessmentScores = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getAssessmentScores_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAssessmentScores failed: unknown result');
};
PrometheusServiceClient.prototype.getAssessmentAnswers = function(unitForkId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAssessmentAnswers(unitForkId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAssessmentAnswers(unitForkId);
  }
};

PrometheusServiceClient.prototype.send_getAssessmentAnswers = function(unitForkId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAssessmentAnswers', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getAssessmentAnswers_args();
  args.unitForkId = unitForkId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getAssessmentAnswers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getAssessmentAnswers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAssessmentAnswers failed: unknown result');
};
PrometheusServiceClient.prototype.getAssessmentState = function(unitForkId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAssessmentState(unitForkId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAssessmentState(unitForkId);
  }
};

PrometheusServiceClient.prototype.send_getAssessmentState = function(unitForkId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAssessmentState', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_getAssessmentState_args();
  args.unitForkId = unitForkId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_getAssessmentState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_getAssessmentState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAssessmentState failed: unknown result');
};
PrometheusServiceClient.prototype.storeAssessmentState = function(unitForkId, assessmentId, state, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeAssessmentState(unitForkId, assessmentId, state);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeAssessmentState(unitForkId, assessmentId, state);
  }
};

PrometheusServiceClient.prototype.send_storeAssessmentState = function(unitForkId, assessmentId, state) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeAssessmentState', Thrift.MessageType.CALL, this.seqid());
  var args = new PrometheusService_storeAssessmentState_args();
  args.unitForkId = unitForkId;
  args.assessmentId = assessmentId;
  args.state = state;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PrometheusServiceClient.prototype.recv_storeAssessmentState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PrometheusService_storeAssessmentState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  callback(null);
};
var PrometheusServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
PrometheusServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PrometheusServiceProcessor.prototype.process_getCoursesByModuleIds = function(seqid, input, output) {
  var args = new PrometheusService_getCoursesByModuleIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoursesByModuleIds.length === 1) {
    Q.fcall(this._handler.getCoursesByModuleIds, args.ids)
      .then(function(result) {
        var result_obj = new PrometheusService_getCoursesByModuleIds_result({success: result});
        output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCoursesByModuleIds(args.ids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getCoursesByModuleIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoursesByModuleIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getCourses = function(seqid, input, output) {
  var args = new PrometheusService_getCourses_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCourses.length === 3) {
    Q.fcall(this._handler.getCourses, args.ids, args.withModules, args.withRemoved)
      .then(function(result) {
        var result_obj = new PrometheusService_getCourses_result({success: result});
        output.writeMessageBegin("getCourses", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCourses", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCourses(args.ids, args.withModules, args.withRemoved, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getCourses_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCourses", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCourses", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_createCourse = function(seqid, input, output) {
  var args = new PrometheusService_createCourse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createCourse.length === 1) {
    Q.fcall(this._handler.createCourse, args.details)
      .then(function(result) {
        var result_obj = new PrometheusService_createCourse_result({success: result});
        output.writeMessageBegin("createCourse", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createCourse", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createCourse(args.details, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_createCourse_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createCourse", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createCourse", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_updateCourse = function(seqid, input, output) {
  var args = new PrometheusService_updateCourse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateCourse.length === 2) {
    Q.fcall(this._handler.updateCourse, args.id, args.details)
      .then(function(result) {
        var result_obj = new PrometheusService_updateCourse_result({success: result});
        output.writeMessageBegin("updateCourse", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_updateCourse_result(err);
          output.writeMessageBegin("updateCourse", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateCourse", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateCourse(args.id, args.details, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_updateCourse_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateCourse", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateCourse", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_setCourseModules = function(seqid, input, output) {
  var args = new PrometheusService_setCourseModules_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setCourseModules.length === 2) {
    Q.fcall(this._handler.setCourseModules, args.id, args.moduleIds)
      .then(function(result) {
        var result_obj = new PrometheusService_setCourseModules_result({success: result});
        output.writeMessageBegin("setCourseModules", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_setCourseModules_result(err);
          output.writeMessageBegin("setCourseModules", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setCourseModules", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setCourseModules(args.id, args.moduleIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_setCourseModules_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setCourseModules", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setCourseModules", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_deleteCourse = function(seqid, input, output) {
  var args = new PrometheusService_deleteCourse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteCourse.length === 1) {
    Q.fcall(this._handler.deleteCourse, args.id)
      .then(function(result) {
        var result_obj = new PrometheusService_deleteCourse_result({success: result});
        output.writeMessageBegin("deleteCourse", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_deleteCourse_result(err);
          output.writeMessageBegin("deleteCourse", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteCourse", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteCourse(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_deleteCourse_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteCourse", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteCourse", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getModules = function(seqid, input, output) {
  var args = new PrometheusService_getModules_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getModules.length === 3) {
    Q.fcall(this._handler.getModules, args.ids, args.withUnits, args.withRemoved)
      .then(function(result) {
        var result_obj = new PrometheusService_getModules_result({success: result});
        output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModules", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getModules(args.ids, args.withUnits, args.withRemoved, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getModules_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModules", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getModuleByUnitId = function(seqid, input, output) {
  var args = new PrometheusService_getModuleByUnitId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getModuleByUnitId.length === 1) {
    Q.fcall(this._handler.getModuleByUnitId, args.unitId)
      .then(function(result) {
        var result_obj = new PrometheusService_getModuleByUnitId_result({success: result});
        output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getModuleByUnitId(args.unitId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getModuleByUnitId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModuleByUnitId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_createModule = function(seqid, input, output) {
  var args = new PrometheusService_createModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createModule.length === 1) {
    Q.fcall(this._handler.createModule, args.details)
      .then(function(result) {
        var result_obj = new PrometheusService_createModule_result({success: result});
        output.writeMessageBegin("createModule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createModule", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createModule(args.details, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_createModule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_updateModule = function(seqid, input, output) {
  var args = new PrometheusService_updateModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateModule.length === 2) {
    Q.fcall(this._handler.updateModule, args.id, args.details)
      .then(function(result) {
        var result_obj = new PrometheusService_updateModule_result({success: result});
        output.writeMessageBegin("updateModule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_updateModule_result(err);
          output.writeMessageBegin("updateModule", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateModule", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateModule(args.id, args.details, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_updateModule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_deleteModule = function(seqid, input, output) {
  var args = new PrometheusService_deleteModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteModule.length === 1) {
    Q.fcall(this._handler.deleteModule, args.id)
      .then(function(result) {
        var result_obj = new PrometheusService_deleteModule_result({success: result});
        output.writeMessageBegin("deleteModule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_deleteModule_result(err);
          output.writeMessageBegin("deleteModule", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteModule", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteModule(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_deleteModule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_addUnitToModule = function(seqid, input, output) {
  var args = new PrometheusService_addUnitToModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addUnitToModule.length === 2) {
    Q.fcall(this._handler.addUnitToModule, args.moduleId, args.unitDetails)
      .then(function(result) {
        var result_obj = new PrometheusService_addUnitToModule_result({success: result});
        output.writeMessageBegin("addUnitToModule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_addUnitToModule_result(err);
          output.writeMessageBegin("addUnitToModule", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addUnitToModule", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addUnitToModule(args.moduleId, args.unitDetails, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_addUnitToModule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addUnitToModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addUnitToModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_updateUnit = function(seqid, input, output) {
  var args = new PrometheusService_updateUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUnit.length === 2) {
    Q.fcall(this._handler.updateUnit, args.id, args.details)
      .then(function(result) {
        var result_obj = new PrometheusService_updateUnit_result({success: result});
        output.writeMessageBegin("updateUnit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_updateUnit_result(err);
          output.writeMessageBegin("updateUnit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUnit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUnit(args.id, args.details, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_updateUnit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateUnit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUnit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_publishUnit = function(seqid, input, output) {
  var args = new PrometheusService_publishUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.publishUnit.length === 4) {
    Q.fcall(this._handler.publishUnit, args.replyParameters, args.unitId, args.projectId, args.stackVersionId)
      .then(function(result) {
        var result_obj = new PrometheusService_publishUnit_result({success: result});
        output.writeMessageBegin("publishUnit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_publishUnit_result(err);
          output.writeMessageBegin("publishUnit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("publishUnit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.publishUnit(args.replyParameters, args.unitId, args.projectId, args.stackVersionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_publishUnit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("publishUnit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("publishUnit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_migrateFromS3Archive = function(seqid, input, output) {
  var args = new PrometheusService_migrateFromS3Archive_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.migrateFromS3Archive.length === 3) {
    Q.fcall(this._handler.migrateFromS3Archive, args.unitId, args.archiveS3Key, args.stackVersionId)
      .then(function(result) {
        var result_obj = new PrometheusService_migrateFromS3Archive_result({success: result});
        output.writeMessageBegin("migrateFromS3Archive", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_migrateFromS3Archive_result(err);
          output.writeMessageBegin("migrateFromS3Archive", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("migrateFromS3Archive", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.migrateFromS3Archive(args.unitId, args.archiveS3Key, args.stackVersionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_migrateFromS3Archive_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("migrateFromS3Archive", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("migrateFromS3Archive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_changeStackVersionInUnit = function(seqid, input, output) {
  var args = new PrometheusService_changeStackVersionInUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeStackVersionInUnit.length === 2) {
    Q.fcall(this._handler.changeStackVersionInUnit, args.unitId, args.stackVersionId)
      .then(function(result) {
        var result_obj = new PrometheusService_changeStackVersionInUnit_result({success: result});
        output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_changeStackVersionInUnit_result(err);
          output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeStackVersionInUnit(args.unitId, args.stackVersionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_changeStackVersionInUnit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("changeStackVersionInUnit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_removeUnit = function(seqid, input, output) {
  var args = new PrometheusService_removeUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeUnit.length === 1) {
    Q.fcall(this._handler.removeUnit, args.id)
      .then(function(result) {
        var result_obj = new PrometheusService_removeUnit_result({success: result});
        output.writeMessageBegin("removeUnit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_removeUnit_result(err);
          output.writeMessageBegin("removeUnit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeUnit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeUnit(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_removeUnit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeUnit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeUnit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnit = function(seqid, input, output) {
  var args = new PrometheusService_getUnit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnit.length === 1) {
    Q.fcall(this._handler.getUnit, args.id)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnit_result({success: result});
        output.writeMessageBegin("getUnit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_getUnit_result(err);
          output.writeMessageBegin("getUnit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnit(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_getUnit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnits = function(seqid, input, output) {
  var args = new PrometheusService_getUnits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnits.length === 2) {
    Q.fcall(this._handler.getUnits, args.ids, args.withRemoved)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnits_result({success: result});
        output.writeMessageBegin("getUnits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnits", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnits(args.ids, args.withRemoved, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getUnits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_reorderUnits = function(seqid, input, output) {
  var args = new PrometheusService_reorderUnits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reorderUnits.length === 2) {
    Q.fcall(this._handler.reorderUnits, args.moduleId, args.unitIds)
      .then(function(result) {
        var result_obj = new PrometheusService_reorderUnits_result({success: result});
        output.writeMessageBegin("reorderUnits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ReorderConflictException) {
          result = new PrometheusService_reorderUnits_result(err);
          output.writeMessageBegin("reorderUnits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reorderUnits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reorderUnits(args.moduleId, args.unitIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ReorderConflictException) {
        result_obj = new PrometheusService_reorderUnits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reorderUnits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reorderUnits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getLatestUnitVersions = function(seqid, input, output) {
  var args = new PrometheusService_getLatestUnitVersions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLatestUnitVersions.length === 1) {
    Q.fcall(this._handler.getLatestUnitVersions, args.moduleIds)
      .then(function(result) {
        var result_obj = new PrometheusService_getLatestUnitVersions_result({success: result});
        output.writeMessageBegin("getLatestUnitVersions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLatestUnitVersions", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLatestUnitVersions(args.moduleIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getLatestUnitVersions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLatestUnitVersions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLatestUnitVersions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnitGuides = function(seqid, input, output) {
  var args = new PrometheusService_getUnitGuides_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitGuides.length === 2) {
    Q.fcall(this._handler.getUnitGuides, args.unitVersionId, args.isTeacher)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnitGuides_result({success: result});
        output.writeMessageBegin("getUnitGuides", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.NoGuidesInUnitException) {
          result = new PrometheusService_getUnitGuides_result(err);
          output.writeMessageBegin("getUnitGuides", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnitGuides", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitGuides(args.unitVersionId, args.isTeacher, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.NoGuidesInUnitException) {
        result_obj = new PrometheusService_getUnitGuides_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnitGuides", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitGuides", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_createProjectForAuthor = function(seqid, input, output) {
  var args = new PrometheusService_createProjectForAuthor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createProjectForAuthor.length === 2) {
    Q.fcall(this._handler.createProjectForAuthor, args.replyParameters, args.unitId)
      .then(function(result) {
        var result_obj = new PrometheusService_createProjectForAuthor_result({success: result});
        output.writeMessageBegin("createProjectForAuthor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createProjectForAuthor", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createProjectForAuthor(args.replyParameters, args.unitId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_createProjectForAuthor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createProjectForAuthor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createProjectForAuthor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_createUnitFork = function(seqid, input, output) {
  var args = new PrometheusService_createUnitFork_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUnitFork.length === 5) {
    Q.fcall(this._handler.createUnitFork, args.replyParameters, args.id, args.unitVersionId, args.accountId, args.gigaBoxSlot)
      .then(function(result) {
        var result_obj = new PrometheusService_createUnitFork_result({success: result});
        output.writeMessageBegin("createUnitFork", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_createUnitFork_result(err);
          output.writeMessageBegin("createUnitFork", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUnitFork", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUnitFork(args.replyParameters, args.id, args.unitVersionId, args.accountId, args.gigaBoxSlot, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_createUnitFork_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createUnitFork", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUnitFork", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnitFork = function(seqid, input, output) {
  var args = new PrometheusService_getUnitFork_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitFork.length === 1) {
    Q.fcall(this._handler.getUnitFork, args.id)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnitFork_result({success: result});
        output.writeMessageBegin("getUnitFork", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_getUnitFork_result(err);
          output.writeMessageBegin("getUnitFork", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnitFork", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitFork(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_getUnitFork_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnitFork", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitFork", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnitForks = function(seqid, input, output) {
  var args = new PrometheusService_getUnitForks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitForks.length === 1) {
    Q.fcall(this._handler.getUnitForks, args.ids)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnitForks_result({success: result});
        output.writeMessageBegin("getUnitForks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitForks", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitForks(args.ids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getUnitForks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnitForks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitForks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnitForkByProjectId = function(seqid, input, output) {
  var args = new PrometheusService_getUnitForkByProjectId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitForkByProjectId.length === 1) {
    Q.fcall(this._handler.getUnitForkByProjectId, args.projectId)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnitForkByProjectId_result({success: result});
        output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_getUnitForkByProjectId_result(err);
          output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitForkByProjectId(args.projectId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_getUnitForkByProjectId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitForkByProjectId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getUnitForksByProjectIds = function(seqid, input, output) {
  var args = new PrometheusService_getUnitForksByProjectIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnitForksByProjectIds.length === 1) {
    Q.fcall(this._handler.getUnitForksByProjectIds, args.projectIds)
      .then(function(result) {
        var result_obj = new PrometheusService_getUnitForksByProjectIds_result({success: result});
        output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnitForksByProjectIds(args.projectIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getUnitForksByProjectIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnitForksByProjectIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_restoreUnitForkContent = function(seqid, input, output) {
  var args = new PrometheusService_restoreUnitForkContent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.restoreUnitForkContent.length === 4) {
    Q.fcall(this._handler.restoreUnitForkContent, args.replyParameters, args.userId, args.unitForkProjectId, args.folders)
      .then(function(result) {
        var result_obj = new PrometheusService_restoreUnitForkContent_result({success: result});
        output.writeMessageBegin("restoreUnitForkContent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_restoreUnitForkContent_result(err);
          output.writeMessageBegin("restoreUnitForkContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("restoreUnitForkContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.restoreUnitForkContent(args.replyParameters, args.userId, args.unitForkProjectId, args.folders, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_restoreUnitForkContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("restoreUnitForkContent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("restoreUnitForkContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_removeUnitFork = function(seqid, input, output) {
  var args = new PrometheusService_removeUnitFork_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeUnitFork.length === 1) {
    Q.fcall(this._handler.removeUnitFork, args.id)
      .then(function(result) {
        var result_obj = new PrometheusService_removeUnitFork_result({success: result});
        output.writeMessageBegin("removeUnitFork", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_removeUnitFork_result(err);
          output.writeMessageBegin("removeUnitFork", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeUnitFork", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeUnitFork(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_removeUnitFork_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeUnitFork", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeUnitFork", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_incrementTimeSpentInUnitFork = function(seqid, input, output) {
  var args = new PrometheusService_incrementTimeSpentInUnitFork_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.incrementTimeSpentInUnitFork.length === 2) {
    Q.fcall(this._handler.incrementTimeSpentInUnitFork, args.unitForkId, args.seconds)
      .then(function(result) {
        var result_obj = new PrometheusService_incrementTimeSpentInUnitFork_result({success: result});
        output.writeMessageBegin("incrementTimeSpentInUnitFork", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_incrementTimeSpentInUnitFork_result(err);
          output.writeMessageBegin("incrementTimeSpentInUnitFork", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("incrementTimeSpentInUnitFork", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.incrementTimeSpentInUnitFork(args.unitForkId, args.seconds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_incrementTimeSpentInUnitFork_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("incrementTimeSpentInUnitFork", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("incrementTimeSpentInUnitFork", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_runAutogradeScript = function(seqid, input, output) {
  var args = new PrometheusService_runAutogradeScript_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runAutogradeScript.length === 4) {
    Q.fcall(this._handler.runAutogradeScript, args.replyParameters, args.unitForkId, args.autogradeScriptPath, args.envVarJson)
      .then(function(result) {
        var result_obj = new PrometheusService_runAutogradeScript_result({success: result});
        output.writeMessageBegin("runAutogradeScript", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_runAutogradeScript_result(err);
          output.writeMessageBegin("runAutogradeScript", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runAutogradeScript", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runAutogradeScript(args.replyParameters, args.unitForkId, args.autogradeScriptPath, args.envVarJson, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_runAutogradeScript_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runAutogradeScript", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runAutogradeScript", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_runAutogradeScriptForAuthor = function(seqid, input, output) {
  var args = new PrometheusService_runAutogradeScriptForAuthor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runAutogradeScriptForAuthor.length === 4) {
    Q.fcall(this._handler.runAutogradeScriptForAuthor, args.replyParameters, args.projectId, args.autogradeScriptPath, args.envVarJson)
      .then(function(result) {
        var result_obj = new PrometheusService_runAutogradeScriptForAuthor_result({success: result});
        output.writeMessageBegin("runAutogradeScriptForAuthor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_runAutogradeScriptForAuthor_result(err);
          output.writeMessageBegin("runAutogradeScriptForAuthor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runAutogradeScriptForAuthor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runAutogradeScriptForAuthor(args.replyParameters, args.projectId, args.autogradeScriptPath, args.envVarJson, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_runAutogradeScriptForAuthor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runAutogradeScriptForAuthor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runAutogradeScriptForAuthor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_storeAutogradePoints = function(seqid, input, output) {
  var args = new PrometheusService_storeAutogradePoints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeAutogradePoints.length === 2) {
    Q.fcall(this._handler.storeAutogradePoints, args.autogradeToken, args.points)
      .then(function(result) {
        var result_obj = new PrometheusService_storeAutogradePoints_result({success: result});
        output.writeMessageBegin("storeAutogradePoints", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_storeAutogradePoints_result(err);
          output.writeMessageBegin("storeAutogradePoints", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeAutogradePoints", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeAutogradePoints(args.autogradeToken, args.points, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_storeAutogradePoints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("storeAutogradePoints", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeAutogradePoints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_updateUnitVersionInUnitFork = function(seqid, input, output) {
  var args = new PrometheusService_updateUnitVersionInUnitFork_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUnitVersionInUnitFork.length === 3) {
    Q.fcall(this._handler.updateUnitVersionInUnitFork, args.replyParameters, args.unitForkId, args.unitVersionId)
      .then(function(result) {
        var result_obj = new PrometheusService_updateUnitVersionInUnitFork_result({success: result});
        output.writeMessageBegin("updateUnitVersionInUnitFork", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_updateUnitVersionInUnitFork_result(err);
          output.writeMessageBegin("updateUnitVersionInUnitFork", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateUnitVersionInUnitFork", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUnitVersionInUnitFork(args.replyParameters, args.unitForkId, args.unitVersionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_updateUnitVersionInUnitFork_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateUnitVersionInUnitFork", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUnitVersionInUnitFork", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkMultipleChoiceAssessment = function(seqid, input, output) {
  var args = new PrometheusService_checkMultipleChoiceAssessment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkMultipleChoiceAssessment.length === 3) {
    Q.fcall(this._handler.checkMultipleChoiceAssessment, args.unitForkId, args.assessmentId, args.answerIds)
      .then(function(result) {
        var result_obj = new PrometheusService_checkMultipleChoiceAssessment_result({success: result});
        output.writeMessageBegin("checkMultipleChoiceAssessment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
          result = new PrometheusService_checkMultipleChoiceAssessment_result(err);
          output.writeMessageBegin("checkMultipleChoiceAssessment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkMultipleChoiceAssessment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkMultipleChoiceAssessment(args.unitForkId, args.assessmentId, args.answerIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
        result_obj = new PrometheusService_checkMultipleChoiceAssessment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkMultipleChoiceAssessment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkMultipleChoiceAssessment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkMultipleChoiceAssessmentForAuthor = function(seqid, input, output) {
  var args = new PrometheusService_checkMultipleChoiceAssessmentForAuthor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkMultipleChoiceAssessmentForAuthor.length === 2) {
    Q.fcall(this._handler.checkMultipleChoiceAssessmentForAuthor, args.assessmentJson, args.answerIds)
      .then(function(result) {
        var result_obj = new PrometheusService_checkMultipleChoiceAssessmentForAuthor_result({success: result});
        output.writeMessageBegin("checkMultipleChoiceAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_checkMultipleChoiceAssessmentForAuthor_result(err);
          output.writeMessageBegin("checkMultipleChoiceAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkMultipleChoiceAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkMultipleChoiceAssessmentForAuthor(args.assessmentJson, args.answerIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_checkMultipleChoiceAssessmentForAuthor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkMultipleChoiceAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkMultipleChoiceAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkFillInBlanksAssessment = function(seqid, input, output) {
  var args = new PrometheusService_checkFillInBlanksAssessment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkFillInBlanksAssessment.length === 3) {
    Q.fcall(this._handler.checkFillInBlanksAssessment, args.unitForkId, args.assessmentId, args.answers)
      .then(function(result) {
        var result_obj = new PrometheusService_checkFillInBlanksAssessment_result({success: result});
        output.writeMessageBegin("checkFillInBlanksAssessment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
          result = new PrometheusService_checkFillInBlanksAssessment_result(err);
          output.writeMessageBegin("checkFillInBlanksAssessment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkFillInBlanksAssessment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkFillInBlanksAssessment(args.unitForkId, args.assessmentId, args.answers, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
        result_obj = new PrometheusService_checkFillInBlanksAssessment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkFillInBlanksAssessment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkFillInBlanksAssessment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkFillInBlanksAssessmentForAuthor = function(seqid, input, output) {
  var args = new PrometheusService_checkFillInBlanksAssessmentForAuthor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkFillInBlanksAssessmentForAuthor.length === 2) {
    Q.fcall(this._handler.checkFillInBlanksAssessmentForAuthor, args.assessmentJson, args.answers)
      .then(function(result) {
        var result_obj = new PrometheusService_checkFillInBlanksAssessmentForAuthor_result({success: result});
        output.writeMessageBegin("checkFillInBlanksAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_checkFillInBlanksAssessmentForAuthor_result(err);
          output.writeMessageBegin("checkFillInBlanksAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkFillInBlanksAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkFillInBlanksAssessmentForAuthor(args.assessmentJson, args.answers, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_checkFillInBlanksAssessmentForAuthor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkFillInBlanksAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkFillInBlanksAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_storeCodeTestPartialPoints = function(seqid, input, output) {
  var args = new PrometheusService_storeCodeTestPartialPoints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeCodeTestPartialPoints.length === 2) {
    Q.fcall(this._handler.storeCodeTestPartialPoints, args.partialPointsKey, args.points)
      .then(function(result) {
        var result_obj = new PrometheusService_storeCodeTestPartialPoints_result({success: result});
        output.writeMessageBegin("storeCodeTestPartialPoints", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_storeCodeTestPartialPoints_result(err);
          output.writeMessageBegin("storeCodeTestPartialPoints", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeCodeTestPartialPoints", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeCodeTestPartialPoints(args.partialPointsKey, args.points, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_storeCodeTestPartialPoints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("storeCodeTestPartialPoints", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeCodeTestPartialPoints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkCodeTestAssessment = function(seqid, input, output) {
  var args = new PrometheusService_checkCodeTestAssessment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkCodeTestAssessment.length === 3) {
    Q.fcall(this._handler.checkCodeTestAssessment, args.unitForkId, args.assessmentId, args.replyParameters)
      .then(function(result) {
        var result_obj = new PrometheusService_checkCodeTestAssessment_result({success: result});
        output.writeMessageBegin("checkCodeTestAssessment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
          result = new PrometheusService_checkCodeTestAssessment_result(err);
          output.writeMessageBegin("checkCodeTestAssessment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCodeTestAssessment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkCodeTestAssessment(args.unitForkId, args.assessmentId, args.replyParameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
        result_obj = new PrometheusService_checkCodeTestAssessment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkCodeTestAssessment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkCodeTestAssessment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkCodeTestAssessmentForAuthor = function(seqid, input, output) {
  var args = new PrometheusService_checkCodeTestAssessmentForAuthor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkCodeTestAssessmentForAuthor.length === 3) {
    Q.fcall(this._handler.checkCodeTestAssessmentForAuthor, args.projectId, args.assessmentJson, args.replyParameters)
      .then(function(result) {
        var result_obj = new PrometheusService_checkCodeTestAssessmentForAuthor_result({success: result});
        output.writeMessageBegin("checkCodeTestAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_checkCodeTestAssessmentForAuthor_result(err);
          output.writeMessageBegin("checkCodeTestAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCodeTestAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkCodeTestAssessmentForAuthor(args.projectId, args.assessmentJson, args.replyParameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_checkCodeTestAssessmentForAuthor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkCodeTestAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkCodeTestAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkCodeOutputCompareAssessment = function(seqid, input, output) {
  var args = new PrometheusService_checkCodeOutputCompareAssessment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkCodeOutputCompareAssessment.length === 3) {
    Q.fcall(this._handler.checkCodeOutputCompareAssessment, args.unitForkId, args.assessmentId, args.replyParameters)
      .then(function(result) {
        var result_obj = new PrometheusService_checkCodeOutputCompareAssessment_result({success: result});
        output.writeMessageBegin("checkCodeOutputCompareAssessment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
          result = new PrometheusService_checkCodeOutputCompareAssessment_result(err);
          output.writeMessageBegin("checkCodeOutputCompareAssessment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCodeOutputCompareAssessment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkCodeOutputCompareAssessment(args.unitForkId, args.assessmentId, args.replyParameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
        result_obj = new PrometheusService_checkCodeOutputCompareAssessment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkCodeOutputCompareAssessment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkCodeOutputCompareAssessment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_checkCodeOutputCompareAssessmentForAuthor = function(seqid, input, output) {
  var args = new PrometheusService_checkCodeOutputCompareAssessmentForAuthor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkCodeOutputCompareAssessmentForAuthor.length === 3) {
    Q.fcall(this._handler.checkCodeOutputCompareAssessmentForAuthor, args.projectId, args.assessmentJson, args.replyParameters)
      .then(function(result) {
        var result_obj = new PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result({success: result});
        output.writeMessageBegin("checkCodeOutputCompareAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result(err);
          output.writeMessageBegin("checkCodeOutputCompareAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCodeOutputCompareAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkCodeOutputCompareAssessmentForAuthor(args.projectId, args.assessmentJson, args.replyParameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_checkCodeOutputCompareAssessmentForAuthor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkCodeOutputCompareAssessmentForAuthor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkCodeOutputCompareAssessmentForAuthor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_submitCustomAssessmentResult = function(seqid, input, output) {
  var args = new PrometheusService_submitCustomAssessmentResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitCustomAssessmentResult.length === 3) {
    Q.fcall(this._handler.submitCustomAssessmentResult, args.unitForkId, args.assessmentId, args.points)
      .then(function(result) {
        var result_obj = new PrometheusService_submitCustomAssessmentResult_result({success: result});
        output.writeMessageBegin("submitCustomAssessmentResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
          result = new PrometheusService_submitCustomAssessmentResult_result(err);
          output.writeMessageBegin("submitCustomAssessmentResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("submitCustomAssessmentResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitCustomAssessmentResult(args.unitForkId, args.assessmentId, args.points, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
        result_obj = new PrometheusService_submitCustomAssessmentResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("submitCustomAssessmentResult", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitCustomAssessmentResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_submitFreeTextAssessmentAnswer = function(seqid, input, output) {
  var args = new PrometheusService_submitFreeTextAssessmentAnswer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitFreeTextAssessmentAnswer.length === 3) {
    Q.fcall(this._handler.submitFreeTextAssessmentAnswer, args.unitForkId, args.assessmentId, args.answer)
      .then(function(result) {
        var result_obj = new PrometheusService_submitFreeTextAssessmentAnswer_result({success: result});
        output.writeMessageBegin("submitFreeTextAssessmentAnswer", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
          result = new PrometheusService_submitFreeTextAssessmentAnswer_result(err);
          output.writeMessageBegin("submitFreeTextAssessmentAnswer", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("submitFreeTextAssessmentAnswer", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitFreeTextAssessmentAnswer(args.unitForkId, args.assessmentId, args.answer, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException || err instanceof ttypes.AssessmentAlreadyAnsweredException) {
        result_obj = new PrometheusService_submitFreeTextAssessmentAnswer_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("submitFreeTextAssessmentAnswer", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitFreeTextAssessmentAnswer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_markFreeTextAssessment = function(seqid, input, output) {
  var args = new PrometheusService_markFreeTextAssessment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.markFreeTextAssessment.length === 4) {
    Q.fcall(this._handler.markFreeTextAssessment, args.unitForkId, args.assessmentId, args.answerId, args.points)
      .then(function(result) {
        var result_obj = new PrometheusService_markFreeTextAssessment_result({success: result});
        output.writeMessageBegin("markFreeTextAssessment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
          result = new PrometheusService_markFreeTextAssessment_result(err);
          output.writeMessageBegin("markFreeTextAssessment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("markFreeTextAssessment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.markFreeTextAssessment(args.unitForkId, args.assessmentId, args.answerId, args.points, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException || err instanceof ttypes.ArgumentException) {
        result_obj = new PrometheusService_markFreeTextAssessment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("markFreeTextAssessment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("markFreeTextAssessment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getAssessmentScores = function(seqid, input, output) {
  var args = new PrometheusService_getAssessmentScores_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAssessmentScores.length === 1) {
    Q.fcall(this._handler.getAssessmentScores, args.unitForkIds)
      .then(function(result) {
        var result_obj = new PrometheusService_getAssessmentScores_result({success: result});
        output.writeMessageBegin("getAssessmentScores", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAssessmentScores", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAssessmentScores(args.unitForkIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getAssessmentScores_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAssessmentScores", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAssessmentScores", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getAssessmentAnswers = function(seqid, input, output) {
  var args = new PrometheusService_getAssessmentAnswers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAssessmentAnswers.length === 1) {
    Q.fcall(this._handler.getAssessmentAnswers, args.unitForkId)
      .then(function(result) {
        var result_obj = new PrometheusService_getAssessmentAnswers_result({success: result});
        output.writeMessageBegin("getAssessmentAnswers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAssessmentAnswers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAssessmentAnswers(args.unitForkId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getAssessmentAnswers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAssessmentAnswers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAssessmentAnswers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_getAssessmentState = function(seqid, input, output) {
  var args = new PrometheusService_getAssessmentState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAssessmentState.length === 1) {
    Q.fcall(this._handler.getAssessmentState, args.unitForkId)
      .then(function(result) {
        var result_obj = new PrometheusService_getAssessmentState_result({success: result});
        output.writeMessageBegin("getAssessmentState", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAssessmentState", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAssessmentState(args.unitForkId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new PrometheusService_getAssessmentState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAssessmentState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAssessmentState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PrometheusServiceProcessor.prototype.process_storeAssessmentState = function(seqid, input, output) {
  var args = new PrometheusService_storeAssessmentState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeAssessmentState.length === 3) {
    Q.fcall(this._handler.storeAssessmentState, args.unitForkId, args.assessmentId, args.state)
      .then(function(result) {
        var result_obj = new PrometheusService_storeAssessmentState_result({success: result});
        output.writeMessageBegin("storeAssessmentState", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NotFoundException) {
          result = new PrometheusService_storeAssessmentState_result(err);
          output.writeMessageBegin("storeAssessmentState", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeAssessmentState", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeAssessmentState(args.unitForkId, args.assessmentId, args.state, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NotFoundException) {
        result_obj = new PrometheusService_storeAssessmentState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("storeAssessmentState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeAssessmentState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
